// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/bblfsh/sdk/uast/generated.proto

package github.com.bblfsh.sdk.uast;

public final class Generated {
  private Generated() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Role is the main UAST annotation. It indicates that a node in an AST can
   * be interpreted as acting with certain language-independent role.
   * 
   * go:generate stringer -type=Role
   * </pre>
   *
   * Protobuf enum {@code github.com.bblfsh.sdk.uast.Role}
   */
  public enum Role
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Invalid Role is assigned as a zero value since protobuf enum definition must start at 0.
     * </pre>
     *
     * <code>INVALID = 0 [(.gogoproto.enumvalue_customname) = "Invalid"];</code>
     */
    INVALID(0),
    /**
     * <pre>
     * SimpleIdentifier is the most basic form of identifier, used for variable
     * names, functions, packages, etc.
     * </pre>
     *
     * <code>SIMPLE_IDENTIFIER = 1 [(.gogoproto.enumvalue_customname) = "SimpleIdentifier"];</code>
     */
    SIMPLE_IDENTIFIER(1),
    /**
     * <pre>
     * QualifiedIdentifier is form of identifier composed of multiple
     * SimpleIdentifier. One main identifier (usually the last one) and one
     * or more qualifiers.
     * </pre>
     *
     * <code>QUALIFIED_IDENTIFIER = 2 [(.gogoproto.enumvalue_customname) = "QualifiedIdentifier"];</code>
     */
    QUALIFIED_IDENTIFIER(2),
    /**
     * <pre>
     * BinaryExpression is the parent node of all binary expressions of any type. It must have
     * BinaryExpressionLeft, BinaryExpressionRight and BinaryExpressionOp children.
     * Those children must have aditional roles specifying the specific type (e.g. Expression,
     * QualifiedIdentifier or Literal for the left and right nodes and one of the specific operator roles
     * for the binary operator). BinaryExpresion can be considered a derivation of Expression and thus
     * could be its child or implemented as an additional node.
     * </pre>
     *
     * <code>BINARY_EXPRESSION = 3 [(.gogoproto.enumvalue_customname) = "BinaryExpression"];</code>
     */
    BINARY_EXPRESSION(3),
    /**
     * <code>BINARY_EXPRESSION_LEFT = 4 [(.gogoproto.enumvalue_customname) = "BinaryExpressionLeft"];</code>
     */
    BINARY_EXPRESSION_LEFT(4),
    /**
     * <code>BINARY_EXPRESSION_RIGHT = 5 [(.gogoproto.enumvalue_customname) = "BinaryExpressionRight"];</code>
     */
    BINARY_EXPRESSION_RIGHT(5),
    /**
     * <code>BINARY_EXPRESSION_OP = 6 [(.gogoproto.enumvalue_customname) = "BinaryExpressionOp"];</code>
     */
    BINARY_EXPRESSION_OP(6),
    /**
     * <pre>
     * Infix should mark the nodes which are parents of expression nodes using infix notation, e.g.: a+b.
     * Nodes without Infix or Postfix mark are considered in prefix order by default.
     * </pre>
     *
     * <code>INFIX = 7 [(.gogoproto.enumvalue_customname) = "Infix"];</code>
     */
    INFIX(7),
    /**
     * <pre>
     * Postfix should mark the nodes which are parents of nodes using postfix notation, e.g.: ab+.
     * Nodes without Infix or Postfix mark are considered in prefix order by default.
     * </pre>
     *
     * <code>POSTFIX = 8 [(.gogoproto.enumvalue_customname) = "Postfix"];</code>
     */
    POSTFIX(8),
    /**
     * <pre>
     * OpBitwiseLeftShift is the binary bitwise shift to the left operator (i.e. &lt;&lt; in most languages)
     * </pre>
     *
     * <code>OP_BITWISE_LEFT_SHIFT = 9 [(.gogoproto.enumvalue_customname) = "OpBitwiseLeftShift"];</code>
     */
    OP_BITWISE_LEFT_SHIFT(9),
    /**
     * <pre>
     * OpBitwiseRightShift is the binary bitwise shift to the right operator (i.e. &gt;&gt; in most languages)
     * </pre>
     *
     * <code>OP_BITWISE_RIGHT_SHIFT = 10 [(.gogoproto.enumvalue_customname) = "OpBitwiseRightShift"];</code>
     */
    OP_BITWISE_RIGHT_SHIFT(10),
    /**
     * <pre>
     * OpBitwiseUnsignedRightShift is the binary bitwise unsigned shift to the
     * right operator (e.g. &gt;&gt;&gt; in Java or C#)
     * </pre>
     *
     * <code>OP_BITWISE_UNSIGNED_RIGHT_SHIFT = 11 [(.gogoproto.enumvalue_customname) = "OpBitwiseUnsignedRightShift"];</code>
     */
    OP_BITWISE_UNSIGNED_RIGHT_SHIFT(11),
    /**
     * <pre>
     * OpBitwiseOr is the binary bitwise OR operator  (i.e. | in most languages)
     * </pre>
     *
     * <code>OP_BITWISE_OR = 12 [(.gogoproto.enumvalue_customname) = "OpBitwiseOr"];</code>
     */
    OP_BITWISE_OR(12),
    /**
     * <pre>
     * OpBitwiseXor is the binary bitwise Xor operator  (i.e. ~ in most languages)
     * </pre>
     *
     * <code>OP_BITWISE_XOR = 13 [(.gogoproto.enumvalue_customname) = "OpBitwiseXor"];</code>
     */
    OP_BITWISE_XOR(13),
    /**
     * <pre>
     * OpBitwiseAnd is the binary bitwise And/complement operator  (i.e. &amp; in most languages)
     * </pre>
     *
     * <code>OP_BITWISE_AND = 14 [(.gogoproto.enumvalue_customname) = "OpBitwiseAnd"];</code>
     */
    OP_BITWISE_AND(14),
    /**
     * <code>EXPRESSION = 15 [(.gogoproto.enumvalue_customname) = "Expression"];</code>
     */
    EXPRESSION(15),
    /**
     * <code>STATEMENT = 16 [(.gogoproto.enumvalue_customname) = "Statement"];</code>
     */
    STATEMENT(16),
    /**
     * <pre>
     * OpEqual is the operator that tests for logical equality between two expressions
     * </pre>
     *
     * <code>OP_EQUAL = 17 [(.gogoproto.enumvalue_customname) = "OpEqual"];</code>
     */
    OP_EQUAL(17),
    /**
     * <pre>
     * OpEqual is the operator that tests for logical inequality between two expressions
     * (i.e. != or != or &lt;&gt; in most languages).
     * </pre>
     *
     * <code>OP_NOT_EQUAL = 18 [(.gogoproto.enumvalue_customname) = "OpNotEqual"];</code>
     */
    OP_NOT_EQUAL(18),
    /**
     * <pre>
     * OpEqual is the operator that tests if the expression on the left is worth logically less
     * than the expression on the right. (i.e. &lt; in most languages).
     * </pre>
     *
     * <code>OP_LESS_THAN = 19 [(.gogoproto.enumvalue_customname) = "OpLessThan"];</code>
     */
    OP_LESS_THAN(19),
    /**
     * <pre>
     * OpEqual is the operator that tests if the expression on the left is worth logically less
     * or has equality with the expression on the right. (i.e. &gt;= in most languages).
     * </pre>
     *
     * <code>OP_LESS_THAN_EQUAL = 20 [(.gogoproto.enumvalue_customname) = "OpLessThanEqual"];</code>
     */
    OP_LESS_THAN_EQUAL(20),
    /**
     * <pre>
     * OpEqual is the operator that tests if the expression on the left is worth logically more
     * than the expression on the right. (i.e. &gt; in most languages).
     * </pre>
     *
     * <code>OP_GREATER_THAN = 21 [(.gogoproto.enumvalue_customname) = "OpGreaterThan"];</code>
     */
    OP_GREATER_THAN(21),
    /**
     * <pre>
     * OpEqual is the operator that tests if the expression on the left is worth logically more
     * or has equality with the expression on the right. (i.e. &gt;= in most languages).
     * </pre>
     *
     * <code>OP_GREATER_THAN_EQUAL = 22 [(.gogoproto.enumvalue_customname) = "OpGreaterThanEqual"];</code>
     */
    OP_GREATER_THAN_EQUAL(22),
    /**
     * <pre>
     * OpSame tests if the result of the expressions tested is the same object, like the "is"
     * operator in node or === in Javascript.
     * </pre>
     *
     * <code>OP_SAME = 23 [(.gogoproto.enumvalue_customname) = "OpSame"];</code>
     */
    OP_SAME(23),
    /**
     * <pre>
     * OpNotSame tests if the result of the expressions tested are different objects, like the "is not"
     * operator in node or !== in Javascript.
     * </pre>
     *
     * <code>OP_NOT_SAME = 24 [(.gogoproto.enumvalue_customname) = "OpNotSame"];</code>
     */
    OP_NOT_SAME(24),
    /**
     * <pre>
     * OpContains tests if the left expression result is contained inside, or has an item contained
     * with equality, the result of the expression of the right which usually will be a container type
     * (e.g. "in" in Python).
     * </pre>
     *
     * <code>OP_CONTAINS = 25 [(.gogoproto.enumvalue_customname) = "OpContains"];</code>
     */
    OP_CONTAINS(25),
    /**
     * <pre>
     * OpNotContains tests if the left expression result is not contained inside
     * the result of the expression of the right which usually will be a container type
     * (e.g. "not in" in Python).
     * </pre>
     *
     * <code>OP_NOT_CONTAINS = 26 [(.gogoproto.enumvalue_customname) = "OpNotContains"];</code>
     */
    OP_NOT_CONTAINS(26),
    /**
     * <pre>
     * OpPreIncrement increments in place the value before it is evaluated. It's
     * typical of C-inspired languages (e. g. ++x).
     * </pre>
     *
     * <code>OP_PRE_INCREMENT = 27 [(.gogoproto.enumvalue_customname) = "OpPreIncrement"];</code>
     */
    OP_PRE_INCREMENT(27),
    /**
     * <pre>
     * OpPostIncrement increments in place the value after it is evaluated. It's
     * typical of C-inspired languages (e. g. x++).
     * </pre>
     *
     * <code>OP_POST_INCREMENT = 28 [(.gogoproto.enumvalue_customname) = "OpPostIncrement"];</code>
     */
    OP_POST_INCREMENT(28),
    /**
     * <pre>
     * OpPreDecrement decrement in place the value before it is evaluated. It's
     * typical of C-inspired languages (e. g. --x).
     * </pre>
     *
     * <code>OP_PRE_DECREMENT = 29 [(.gogoproto.enumvalue_customname) = "OpPreDecrement"];</code>
     */
    OP_PRE_DECREMENT(29),
    /**
     * <pre>
     * OpPostDecrement decrement in place the value after it is evaluated. It's
     * typical of C-inspired languages (e. g. x--).
     * </pre>
     *
     * <code>OP_POST_DECREMENT = 30 [(.gogoproto.enumvalue_customname) = "OpPostDecrement"];</code>
     */
    OP_POST_DECREMENT(30),
    /**
     * <pre>
     * OpNegative changes the sign of the numeric type (e. g. -x in most languages).
     * </pre>
     *
     * <code>OP_NEGATIVE = 31 [(.gogoproto.enumvalue_customname) = "OpNegative"];</code>
     */
    OP_NEGATIVE(31),
    /**
     * <pre>
     * OpPositive usually is a no-op for basic numeric types but exists in the AST of some languages.
     * On some languages like C it could perform an aritmetic conversion to a signed type without
     * changing the sign or could be overloaded (e. g. +x).
     * </pre>
     *
     * <code>OP_POSITIVE = 32 [(.gogoproto.enumvalue_customname) = "OpPositive"];</code>
     */
    OP_POSITIVE(32),
    /**
     * <pre>
     * OpBitwiseComplement will invert all the bits of a type. (e. g. ~x in C-inspired languages).
     * </pre>
     *
     * <code>OP_BITWISE_COMPLEMENT = 33 [(.gogoproto.enumvalue_customname) = "OpBitwiseComplement"];</code>
     */
    OP_BITWISE_COMPLEMENT(33),
    /**
     * <pre>
     * OpDereference will get the actual value pointed by a pointer or reference type (e.g. *x).
     * </pre>
     *
     * <code>OP_DEREFERENCE = 34 [(.gogoproto.enumvalue_customname) = "OpDereference"];</code>
     */
    OP_DEREFERENCE(34),
    /**
     * <pre>
     * OpTakeAddress will get the memory address of the associated variable which will usually be
     * stored in a pointer or reference type (e. g. &amp;x).
     * </pre>
     *
     * <code>OP_TAKE_ADDRESS = 35 [(.gogoproto.enumvalue_customname) = "OpTakeAddress"];</code>
     */
    OP_TAKE_ADDRESS(35),
    /**
     * <pre>
     * File is the root node of a single file AST.
     * </pre>
     *
     * <code>FILE = 36 [(.gogoproto.enumvalue_customname) = "File"];</code>
     */
    FILE(36),
    /**
     * <pre>
     * OpBooleanAnd is the boolean AND operator (i.e. "and" or &amp;&amp; in most languages)
     * </pre>
     *
     * <code>OP_BOOLEAN_AND = 37 [(.gogoproto.enumvalue_customname) = "OpBooleanAnd"];</code>
     */
    OP_BOOLEAN_AND(37),
    /**
     * <pre>
     * OpBooleanOr is the boolean OR operator (i.e. "or" or || in most languages)
     * </pre>
     *
     * <code>OP_BOOLEAN_OR = 38 [(.gogoproto.enumvalue_customname) = "OpBooleanOr"];</code>
     */
    OP_BOOLEAN_OR(38),
    /**
     * <pre>
     * OpBooleanNot is the boolean NOT operator (i.e. "NOT" or ! in most languages)
     * </pre>
     *
     * <code>OP_BOOLEAN_NOT = 39 [(.gogoproto.enumvalue_customname) = "OpBooleanNot"];</code>
     */
    OP_BOOLEAN_NOT(39),
    /**
     * <pre>
     * OpBooleanXor is the boolean XOR operator (i.e. "XOR" or ^ in most languages)
     * </pre>
     *
     * <code>OP_BOOLEAN_XOR = 40 [(.gogoproto.enumvalue_customname) = "OpBooleanXor"];</code>
     */
    OP_BOOLEAN_XOR(40),
    /**
     * <pre>
     * OpAdd is the binary add operator (i.e. + in most languages).
     * </pre>
     *
     * <code>OP_ADD = 41 [(.gogoproto.enumvalue_customname) = "OpAdd"];</code>
     */
    OP_ADD(41),
    /**
     * <pre>
     * OpSubstract is the binary subtract operator (i.e. - in most languages).
     * </pre>
     *
     * <code>OP_SUBSTRACT = 42 [(.gogoproto.enumvalue_customname) = "OpSubstract"];</code>
     */
    OP_SUBSTRACT(42),
    /**
     * <pre>
     * OpMultiply is the binary multiply operator (i.e. * in most languages).
     * </pre>
     *
     * <code>OP_MULTIPLY = 43 [(.gogoproto.enumvalue_customname) = "OpMultiply"];</code>
     */
    OP_MULTIPLY(43),
    /**
     * <pre>
     * OpDivide is the binary division operator (i.e. / in most languages).
     * </pre>
     *
     * <code>OP_DIVIDE = 44 [(.gogoproto.enumvalue_customname) = "OpDivide"];</code>
     */
    OP_DIVIDE(44),
    /**
     * <pre>
     * OpMod is the binary division module operator (i.e. % or "mod" in most languages).
     * </pre>
     *
     * <code>OP_MOD = 45 [(.gogoproto.enumvalue_customname) = "OpMod"];</code>
     */
    OP_MOD(45),
    /**
     * <pre>
     * PackageDeclaration identifies the package that all its children
     * belong to. Its children include, at least, QualifiedIdentifier or
     * SimpleIdentifier with the package name.
     * </pre>
     *
     * <code>PACKAGE_DECLARATION = 46 [(.gogoproto.enumvalue_customname) = "PackageDeclaration"];</code>
     */
    PACKAGE_DECLARATION(46),
    /**
     * <pre>
     * ImportDeclaration represents the import of another package in the
     * current scope. Its children may include an ImportPath and ImportInclude.
     * </pre>
     *
     * <code>IMPORT_DECLARATION = 47 [(.gogoproto.enumvalue_customname) = "ImportDeclaration"];</code>
     */
    IMPORT_DECLARATION(47),
    /**
     * <pre>
     * ImportPath is the (usually) fully qualified package name to import.
     * </pre>
     *
     * <code>IMPORT_PATH = 48 [(.gogoproto.enumvalue_customname) = "ImportPath"];</code>
     */
    IMPORT_PATH(48),
    /**
     * <pre>
     * ImportAlias is an identifier used as an alias for an imported package
     * in a certain scope.
     * </pre>
     *
     * <code>IMPORT_ALIAS = 49 [(.gogoproto.enumvalue_customname) = "ImportAlias"];</code>
     */
    IMPORT_ALIAS(49),
    /**
     * <pre>
     * FunctionDeclaration is the parent node of all function or method declarations. It should have a
     * FunctionDeclarationName, a FunctionDeclarationBody (except for pure declarations like the ones in C/C++
     * header files or forward declarations in other languages) and, if the function has formal arguments,
     * FunctionDeclarationArgument children.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION = 50 [(.gogoproto.enumvalue_customname) = "FunctionDeclaration"];</code>
     */
    FUNCTION_DECLARATION(50),
    /**
     * <pre>
     * FunctionDeclarationBody is the grouping node for all nodes in the function body.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_BODY = 51 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationBody"];</code>
     */
    FUNCTION_DECLARATION_BODY(51),
    /**
     * <pre>
     * FunctionDeclarationName contains the unqualified name of the function.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_NAME = 52 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationName"];</code>
     */
    FUNCTION_DECLARATION_NAME(52),
    /**
     * <pre>
     * FunctionDeclarationReceiver is the target Type of a method or struct.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_RECEIVER = 53 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationReceiver"];</code>
     */
    FUNCTION_DECLARATION_RECEIVER(53),
    /**
     * <pre>
     * FunctionDeclarationArgument is the parent node for the function formal arguments. The name will be
     * specified as the token of the child FunctionDeclarationArgumentName and depending on the language it
     * could have one or more child nodes of different types to implement them in the UAST like
     * FunctionDeclarationArgumentDefaultValue, type declarations (TODO), annotations (TODO), etc.
     * FunctionDeclarationArguments
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_ARGUMENT = 54 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationArgument"];</code>
     */
    FUNCTION_DECLARATION_ARGUMENT(54),
    /**
     * <pre>
     * FunctionDeclarationArgumentName is the symbolic name of the argument. On languages that support
     * argument passing by name this will be the name used by the CallNamedArgument roles.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_ARGUMENT_NAME = 55 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationArgumentName"];</code>
     */
    FUNCTION_DECLARATION_ARGUMENT_NAME(55),
    /**
     * <pre>
     * For languages that support setting a default value for a formal argument,
     * FunctionDeclarationArgumentDefaultValue is the node that contains the default value.
     * Depending on the language his child node representing the actual value could be some kind or
     * literal or even expressions that can resolved at runtime (if interpreted) or compile time.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_ARGUMENT_DEFAULT_VALUE = 56 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationArgumentDefaultValue"];</code>
     */
    FUNCTION_DECLARATION_ARGUMENT_DEFAULT_VALUE(56),
    /**
     * <pre>
     * FunctionDeclarationVarArgsList is the node representing whatever syntax the language has to
     * indicate that from that point in the argument list the function can get a variable number
     * of arguments (e.g. "..." in C-ish languages, "Object..." in Java, "*args" in Python, etc).
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_VAR_ARGS_LIST = 57 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationVarArgsList"];</code>
     */
    FUNCTION_DECLARATION_VAR_ARGS_LIST(57),
    /**
     * <pre>
     * TypeDeclaration is the declaration of a type. It could be a class or
     * interface in Java, a struct, interface or alias in Go, etc. Except for pure or forward declarations
     * it will usually have a TypeDeclarationBody child and for OOP languages a TypeDeclarationBases and/or
     * TypeDeclarationInterfaces.
     * </pre>
     *
     * <code>TYPE_DECLARATION = 58 [(.gogoproto.enumvalue_customname) = "TypeDeclaration"];</code>
     */
    TYPE_DECLARATION(58),
    /**
     * <code>TYPE_DECLARATION_BODY = 59 [(.gogoproto.enumvalue_customname) = "TypeDeclarationBody"];</code>
     */
    TYPE_DECLARATION_BODY(59),
    /**
     * <pre>
     * TypeDeclarationBases are the Types that the current inherits from in OOP languages.
     * </pre>
     *
     * <code>TYPE_DECLARATION_BASES = 60 [(.gogoproto.enumvalue_customname) = "TypeDeclarationBases"];</code>
     */
    TYPE_DECLARATION_BASES(60),
    /**
     * <pre>
     * TypeDeclarationImplements are the Types (usually interfaces) that the Type implements.
     * </pre>
     *
     * <code>TYPE_DECLARATION_IMPLEMENTS = 61 [(.gogoproto.enumvalue_customname) = "TypeDeclarationImplements"];</code>
     */
    TYPE_DECLARATION_IMPLEMENTS(61),
    /**
     * <pre>
     * VisibleFromInstance marks modifiers that declare visibility from instance.
     * </pre>
     *
     * <code>VISIBLE_FROM_INSTANCE = 62 [(.gogoproto.enumvalue_customname) = "VisibleFromInstance"];</code>
     */
    VISIBLE_FROM_INSTANCE(62),
    /**
     * <pre>
     * VisibleFromType marks modifiers that declare visibility from the same
     * type (e.g. class, trait).
     * Implies VisibleFromInstance.
     * </pre>
     *
     * <code>VISIBLE_FROM_TYPE = 63 [(.gogoproto.enumvalue_customname) = "VisibleFromType"];</code>
     */
    VISIBLE_FROM_TYPE(63),
    /**
     * <pre>
     * VisibleFromSubtype marks modifiers that declare visibility from
     * subtypes (e.g. subclasses).
     * Implies VisibleFromInstance and VisibleFromType.
     * </pre>
     *
     * <code>VISIBLE_FROM_SUBTYPE = 64 [(.gogoproto.enumvalue_customname) = "VisibleFromSubtype"];</code>
     */
    VISIBLE_FROM_SUBTYPE(64),
    /**
     * <pre>
     * VisibleFromSubpackage marks modifiers that declare visibility from the
     * same package.
     * </pre>
     *
     * <code>VISIBLE_FROM_PACKAGE = 65 [(.gogoproto.enumvalue_customname) = "VisibleFromPackage"];</code>
     */
    VISIBLE_FROM_PACKAGE(65),
    /**
     * <pre>
     * VisibleFromSubpackage marks modifiers that declare visibility from
     * subpackages.
     * Implies VisibleFromInstance, VisibleFromType and VisibleFromPackage.
     * </pre>
     *
     * <code>VISIBLE_FROM_SUBPACKAGE = 66 [(.gogoproto.enumvalue_customname) = "VisibleFromSubpackage"];</code>
     */
    VISIBLE_FROM_SUBPACKAGE(66),
    /**
     * <pre>
     * VisibleFromModule marks modifiers that declare visibility from the
     * same module (e.g. Java JAR).
     * Implies VisibleFromInstance and VisibleFromType.
     * </pre>
     *
     * <code>VISIBLE_FROM_MODULE = 67 [(.gogoproto.enumvalue_customname) = "VisibleFromModule"];</code>
     */
    VISIBLE_FROM_MODULE(67),
    /**
     * <pre>
     * VisibleFromFriend marks modifiers that declare visibility from friends
     * (e.g. C++ friends).
     * Implies VisibleFromInstance and VisibleFromType.
     * </pre>
     *
     * <code>VISIBLE_FROM_FRIEND = 68 [(.gogoproto.enumvalue_customname) = "VisibleFromFriend"];</code>
     */
    VISIBLE_FROM_FRIEND(68),
    /**
     * <pre>
     * VisibleFromWorld implies full public visibility. Implies all other
     * visibility levels.
     * </pre>
     *
     * <code>VISIBLE_FROM_WORLD = 69 [(.gogoproto.enumvalue_customname) = "VisibleFromWorld"];</code>
     */
    VISIBLE_FROM_WORLD(69),
    /**
     * <pre>
     * If is used for if-then[-else] statements or expressions.
     * An if-then tree will look like:
     * 
     * 	IfStatement {
     * 		**[non-If nodes] {
     * 			IfCondition {
     * 				[...]
     *                      }
     * 		}
     * 		**[non-If* nodes] {
     * 			IfBody {
     * 				[...]
     * 			}
     * 		}
     * 		**[non-If* nodes] {
     * 			IfElse {
     * 				[...]
     * 			}
     * 		}
     * 	}
     * 
     * The IfElse node is optional. The order of IfCondition, IfBody and
     * IfElse is not defined.
     * </pre>
     *
     * <code>IF = 70 [(.gogoproto.enumvalue_customname) = "If"];</code>
     */
    IF(70),
    /**
     * <pre>
     * IfCondition is a condition in an IfStatement or IfExpression.
     * </pre>
     *
     * <code>IF_CONDITION = 71 [(.gogoproto.enumvalue_customname) = "IfCondition"];</code>
     */
    IF_CONDITION(71),
    /**
     * <pre>
     * IfBody is the code following a then clause in an IfStatement or
     * IfExpression.
     * </pre>
     *
     * <code>IF_BODY = 72 [(.gogoproto.enumvalue_customname) = "IfBody"];</code>
     */
    IF_BODY(72),
    /**
     * <pre>
     * IfBody is the code following a else clause in an IfStatement or
     * IfExpression.
     * </pre>
     *
     * <code>IF_ELSE = 73 [(.gogoproto.enumvalue_customname) = "IfElse"];</code>
     */
    IF_ELSE(73),
    /**
     * <pre>
     * Switch is used to represent a broad of switch flavors. An expression
     * is evaluated and then compared to the values returned by different
     * case expressions, executing a body associated to the first case that
     * matches. Similar constructions that go beyond expression comparison
     * (such as pattern matching in Scala's match) should not be annotated
     * with Switch.
     * 
     * TODO: We still have to decide how to annotate fallthrough and
     *      non-fallthrough variants. As well as crazy variants such as Perl
     *      and Bash with its optional fallthrough.
     * </pre>
     *
     * <code>SWITCH = 74 [(.gogoproto.enumvalue_customname) = "Switch"];</code>
     */
    SWITCH(74),
    /**
     * <code>SWITCH_CASE = 75 [(.gogoproto.enumvalue_customname) = "SwitchCase"];</code>
     */
    SWITCH_CASE(75),
    /**
     * <code>SWITCH_CASE_CONDITION = 76 [(.gogoproto.enumvalue_customname) = "SwitchCaseCondition"];</code>
     */
    SWITCH_CASE_CONDITION(76),
    /**
     * <code>SWITCH_CASE_BODY = 77 [(.gogoproto.enumvalue_customname) = "SwitchCaseBody"];</code>
     */
    SWITCH_CASE_BODY(77),
    /**
     * <code>SWITCH_DEFAULT = 78 [(.gogoproto.enumvalue_customname) = "SwitchDefault"];</code>
     */
    SWITCH_DEFAULT(78),
    /**
     * <code>FOR = 79 [(.gogoproto.enumvalue_customname) = "For"];</code>
     */
    FOR(79),
    /**
     * <code>FOR_INIT = 80 [(.gogoproto.enumvalue_customname) = "ForInit"];</code>
     */
    FOR_INIT(80),
    /**
     * <code>FOR_EXPRESSION = 81 [(.gogoproto.enumvalue_customname) = "ForExpression"];</code>
     */
    FOR_EXPRESSION(81),
    /**
     * <code>FOR_UPDATE = 82 [(.gogoproto.enumvalue_customname) = "ForUpdate"];</code>
     */
    FOR_UPDATE(82),
    /**
     * <code>FOR_BODY = 83 [(.gogoproto.enumvalue_customname) = "ForBody"];</code>
     */
    FOR_BODY(83),
    /**
     * <code>FOR_EACH = 84 [(.gogoproto.enumvalue_customname) = "ForEach"];</code>
     */
    FOR_EACH(84),
    /**
     * <code>WHILE = 85 [(.gogoproto.enumvalue_customname) = "While"];</code>
     */
    WHILE(85),
    /**
     * <code>WHILE_CONDITION = 86 [(.gogoproto.enumvalue_customname) = "WhileCondition"];</code>
     */
    WHILE_CONDITION(86),
    /**
     * <code>WHILE_BODY = 87 [(.gogoproto.enumvalue_customname) = "WhileBody"];</code>
     */
    WHILE_BODY(87),
    /**
     * <code>DO_WHILE = 88 [(.gogoproto.enumvalue_customname) = "DoWhile"];</code>
     */
    DO_WHILE(88),
    /**
     * <code>DO_WHILE_CONDITION = 89 [(.gogoproto.enumvalue_customname) = "DoWhileCondition"];</code>
     */
    DO_WHILE_CONDITION(89),
    /**
     * <code>DO_WHILE_BODY = 90 [(.gogoproto.enumvalue_customname) = "DoWhileBody"];</code>
     */
    DO_WHILE_BODY(90),
    /**
     * <code>BREAK = 91 [(.gogoproto.enumvalue_customname) = "Break"];</code>
     */
    BREAK(91),
    /**
     * <code>CONTINUE = 92 [(.gogoproto.enumvalue_customname) = "Continue"];</code>
     */
    CONTINUE(92),
    /**
     * <code>GOTO = 93 [(.gogoproto.enumvalue_customname) = "Goto"];</code>
     */
    GOTO(93),
    /**
     * <pre>
     * Block is a group of statements. If the source language has block scope,
     * it should be annotated both with Block and BlockScope.
     * </pre>
     *
     * <code>BLOCK = 94 [(.gogoproto.enumvalue_customname) = "Block"];</code>
     */
    BLOCK(94),
    /**
     * <pre>
     * BlockScope is a block with its own block scope.
     * TODO: Should we replace BlockScope with a more general Scope role that
     *       can be combined with Block?
     * </pre>
     *
     * <code>BLOCK_SCOPE = 95 [(.gogoproto.enumvalue_customname) = "BlockScope"];</code>
     */
    BLOCK_SCOPE(95),
    /**
     * <pre>
     * Return is a return statement. It might have a child expression or not
     * as with naked returns in Go or return in void methods in Java.
     * </pre>
     *
     * <code>RETURN = 96 [(.gogoproto.enumvalue_customname) = "Return"];</code>
     */
    RETURN(96),
    /**
     * <code>TRY = 97 [(.gogoproto.enumvalue_customname) = "Try"];</code>
     */
    TRY(97),
    /**
     * <code>TRY_BODY = 98 [(.gogoproto.enumvalue_customname) = "TryBody"];</code>
     */
    TRY_BODY(98),
    /**
     * <code>TRY_CATCH = 99 [(.gogoproto.enumvalue_customname) = "TryCatch"];</code>
     */
    TRY_CATCH(99),
    /**
     * <code>TRY_FINALLY = 100 [(.gogoproto.enumvalue_customname) = "TryFinally"];</code>
     */
    TRY_FINALLY(100),
    /**
     * <code>THROW = 101 [(.gogoproto.enumvalue_customname) = "Throw"];</code>
     */
    THROW(101),
    /**
     * <pre>
     * Assert checks if an expression is true and if it is not, it signals
     * an error/exception, possibly stopping the execution.
     * </pre>
     *
     * <code>ASSERT = 102 [(.gogoproto.enumvalue_customname) = "Assert"];</code>
     */
    ASSERT(102),
    /**
     * <pre>
     * Call is any call, whether it is a function, procedure, method or macro.
     * In its simplest form, a call will have a single child with a function
     * name (CallCallee). Arguments are marked with CallPositionalArgument
     * and CallNamedArgument. In OO languages there is usually a CallReceiver
     * too.
     * </pre>
     *
     * <code>CALL = 103 [(.gogoproto.enumvalue_customname) = "Call"];</code>
     */
    CALL(103),
    /**
     * <pre>
     * CallReceiver is an optional expression receiving the call. This
     * corresponds to the method invocant in OO languages, receiving in Go, etc.
     * </pre>
     *
     * <code>CALL_RECEIVER = 104 [(.gogoproto.enumvalue_customname) = "CallReceiver"];</code>
     */
    CALL_RECEIVER(104),
    /**
     * <pre>
     * CallCallee is the callable being called. It might be the name of a
     * function or procedure, it might be a method, it might a simple name
     * or qualified with a namespace.
     * </pre>
     *
     * <code>CALL_CALLEE = 105 [(.gogoproto.enumvalue_customname) = "CallCallee"];</code>
     */
    CALL_CALLEE(105),
    /**
     * <pre>
     * CallPositionalArgument is a positional argument in a call.
     * </pre>
     *
     * <code>CALL_POSITIONAL_ARGUMENT = 106 [(.gogoproto.enumvalue_customname) = "CallPositionalArgument"];</code>
     */
    CALL_POSITIONAL_ARGUMENT(106),
    /**
     * <pre>
     * CallNamedArgument is a named argument in a call. It should have a
     * child with role CallNamedArgumentName and another child with role
     * CallNamedArgumentValue.
     * </pre>
     *
     * <code>CALL_NAMED_ARGUMENT = 107 [(.gogoproto.enumvalue_customname) = "CallNamedArgument"];</code>
     */
    CALL_NAMED_ARGUMENT(107),
    /**
     * <pre>
     * CallNamedArgumentName is the name of a named argument.
     * </pre>
     *
     * <code>CALL_NAMED_ARGUMENT_NAME = 108 [(.gogoproto.enumvalue_customname) = "CallNamedArgumentName"];</code>
     */
    CALL_NAMED_ARGUMENT_NAME(108),
    /**
     * <pre>
     * CallNamedArgumentValue is the value of a named argument.
     * </pre>
     *
     * <code>CALL_NAMED_ARGUMENT_VALUE = 109 [(.gogoproto.enumvalue_customname) = "CallNamedArgumentValue"];</code>
     */
    CALL_NAMED_ARGUMENT_VALUE(109),
    /**
     * <code>NOOP = 110 [(.gogoproto.enumvalue_customname) = "Noop"];</code>
     */
    NOOP(110),
    /**
     * <pre>
     * BooleanLiteral is a boolean literal. It is expected that BooleanLiteral
     * nodes contain a token with some form of boolean literal (e.g. true,
     * false, yes, no, 1, 0).
     * </pre>
     *
     * <code>BOOLEAN_LITERAL = 111 [(.gogoproto.enumvalue_customname) = "BooleanLiteral"];</code>
     */
    BOOLEAN_LITERAL(111),
    /**
     * <pre>
     * ByteLiteral is a single-byte literal. For example, in Rust.
     * </pre>
     *
     * <code>BYTE_LITERAL = 112 [(.gogoproto.enumvalue_customname) = "ByteLiteral"];</code>
     */
    BYTE_LITERAL(112),
    /**
     * <pre>
     * ByteStringLiteral is a literal for a raw byte string. For example, in Rust.
     * </pre>
     *
     * <code>BYTE_STRING_LITERAL = 113 [(.gogoproto.enumvalue_customname) = "ByteStringLiteral"];</code>
     */
    BYTE_STRING_LITERAL(113),
    /**
     * <pre>
     * CharacterLiteral is a character literal. It is expected that
     * CharacterLiteral nodes contain a token with a single character with
     * optional quoting (e.g. c, 'c', "c").
     * </pre>
     *
     * <code>CHARACTER_LITERAL = 114 [(.gogoproto.enumvalue_customname) = "CharacterLiteral"];</code>
     */
    CHARACTER_LITERAL(114),
    /**
     * <pre>
     * ListLiteral is a literal array or list.
     * </pre>
     *
     * <code>LIST_LITERAL = 115 [(.gogoproto.enumvalue_customname) = "ListLiteral"];</code>
     */
    LIST_LITERAL(115),
    /**
     * <pre>
     * MapLiteral is a literal map-like structure.
     * </pre>
     *
     * <code>MAP_LITERAL = 116 [(.gogoproto.enumvalue_customname) = "MapLiteral"];</code>
     */
    MAP_LITERAL(116),
    /**
     * <pre>
     * NullLiteral is a null literal. It is expected that NullLiteral nodes
     * contain a token equivalent to null (e.g. null, nil, None).
     * </pre>
     *
     * <code>NULL_LITERAL = 117 [(.gogoproto.enumvalue_customname) = "NullLiteral"];</code>
     */
    NULL_LITERAL(117),
    /**
     * <pre>
     * NumberLiteral is a numeric literal. This applies to any numeric literal
     * whether it is integer or float, any base, scientific notation or not,
     * etc.
     * </pre>
     *
     * <code>NUMBER_LITERAL = 118 [(.gogoproto.enumvalue_customname) = "NumberLiteral"];</code>
     */
    NUMBER_LITERAL(118),
    /**
     * <pre>
     * RegexpLiteral is a literal for a regular expression.
     * </pre>
     *
     * <code>REGEXP_LITERAL = 119 [(.gogoproto.enumvalue_customname) = "RegexpLiteral"];</code>
     */
    REGEXP_LITERAL(119),
    /**
     * <pre>
     * SetLiteral is a literal for a set. For example, in Python 3.
     * </pre>
     *
     * <code>SET_LITERAL = 120 [(.gogoproto.enumvalue_customname) = "SetLiteral"];</code>
     */
    SET_LITERAL(120),
    /**
     * <pre>
     * StringLiteral is a string literal. This applies both to single-line and
     * multi-line literals and it does not imply any particular encoding.
     * 
     * TODO: Decide what to do with interpolated strings.
     * </pre>
     *
     * <code>STRING_LITERAL = 121 [(.gogoproto.enumvalue_customname) = "StringLiteral"];</code>
     */
    STRING_LITERAL(121),
    /**
     * <pre>
     * TupleLiteral is a literal for a tuple. For example, in Python and Scala.
     * </pre>
     *
     * <code>TUPLE_LITERAL = 122 [(.gogoproto.enumvalue_customname) = "TupleLiteral"];</code>
     */
    TUPLE_LITERAL(122),
    /**
     * <pre>
     * TypeLiteral is a literal that identifies a type. It might contain a
     * token with the type literal itself, or children that define the type.
     * </pre>
     *
     * <code>TYPE_LITERAL = 123 [(.gogoproto.enumvalue_customname) = "TypeLiteral"];</code>
     */
    TYPE_LITERAL(123),
    /**
     * <pre>
     * OtherLiteral is a literal of a type not covered by other literal
     * annotations.
     * </pre>
     *
     * <code>OTHER_LITERAL = 124 [(.gogoproto.enumvalue_customname) = "OtherLiteral"];</code>
     */
    OTHER_LITERAL(124),
    /**
     * <pre>
     * MapEntry is the expression pairing a map key and a value usually on MapLiteral expressions. It must
     * have both a MapKey and a MapValue children (e.g. {"key": "value", "otherkey": "otherval"} in Python).
     * </pre>
     *
     * <code>MAP_ENTRY = 125 [(.gogoproto.enumvalue_customname) = "MapEntry"];</code>
     */
    MAP_ENTRY(125),
    /**
     * <code>MAP_KEY = 126 [(.gogoproto.enumvalue_customname) = "MapKey"];</code>
     */
    MAP_KEY(126),
    /**
     * <code>MAP_VALUE = 127 [(.gogoproto.enumvalue_customname) = "MapValue"];</code>
     */
    MAP_VALUE(127),
    /**
     * <code>TYPE = 128 [(.gogoproto.enumvalue_customname) = "Type"];</code>
     */
    TYPE(128),
    /**
     * <pre>
     * TODO: should we distinguish between primitive and builtin types?
     * </pre>
     *
     * <code>PRIMITIVE_TYPE = 129 [(.gogoproto.enumvalue_customname) = "PrimitiveType"];</code>
     */
    PRIMITIVE_TYPE(129),
    /**
     * <pre>
     * Assignment represents a variable assignment or binding.
     * The variable that is being assigned to is annotated with the
     * AssignmentVariable role, while the value is annotated with
     * AssignmentValue.
     * </pre>
     *
     * <code>ASSIGNMENT = 130 [(.gogoproto.enumvalue_customname) = "Assignment"];</code>
     */
    ASSIGNMENT(130),
    /**
     * <code>ASSIGNMENT_VARIABLE = 131 [(.gogoproto.enumvalue_customname) = "AssignmentVariable"];</code>
     */
    ASSIGNMENT_VARIABLE(131),
    /**
     * <code>ASSIGNMENT_VALUE = 132 [(.gogoproto.enumvalue_customname) = "AssignmentValue"];</code>
     */
    ASSIGNMENT_VALUE(132),
    /**
     * <pre>
     * AugmentedAssignment is an augmented assignment usually combining the equal operator with
     * another one (e. g. +=, -=, *=, etc). It is expected that children contains an
     * AugmentedAssignmentOperator with a child or aditional role for the specific Bitwise or
     * Arithmetic operator used. The AugmentedAssignmentVariable and AugmentedAssignmentValue roles
     * have the same meaning than in Assignment.
     * </pre>
     *
     * <code>AUGMENTED_ASSIGNMENT = 133 [(.gogoproto.enumvalue_customname) = "AugmentedAssignment"];</code>
     */
    AUGMENTED_ASSIGNMENT(133),
    /**
     * <code>AUGMENTED_ASSIGNMENT_OPERATOR = 134 [(.gogoproto.enumvalue_customname) = "AugmentedAssignmentOperator"];</code>
     */
    AUGMENTED_ASSIGNMENT_OPERATOR(134),
    /**
     * <code>AUGMENTED_ASSIGNMENT_VARIABLE = 135 [(.gogoproto.enumvalue_customname) = "AugmentedAssignmentVariable"];</code>
     */
    AUGMENTED_ASSIGNMENT_VARIABLE(135),
    /**
     * <code>AUGMENTED_ASSIGNMENT_VALUE = 136 [(.gogoproto.enumvalue_customname) = "AugmentedAssignmentValue"];</code>
     */
    AUGMENTED_ASSIGNMENT_VALUE(136),
    /**
     * <pre>
     * This represents the self-reference of an object instance in
     * one of its methods. This corresponds to the `this` keyword
     * (e.g. Java, C++, PHP), `self` (e.g. Smalltalk, Perl, Swift) and `Me`
     * (e.g. Visual Basic).
     * </pre>
     *
     * <code>THIS = 137 [(.gogoproto.enumvalue_customname) = "This"];</code>
     */
    THIS(137),
    /**
     * <code>COMMENT = 138 [(.gogoproto.enumvalue_customname) = "Comment"];</code>
     */
    COMMENT(138),
    /**
     * <pre>
     * Documentation is a node that represents documentation of another node,
     * such as function or package. Documentation is usually in the form of
     * a string in certain position (e.g. Python docstring) or comment
     * (e.g. Javadoc, godoc).
     * </pre>
     *
     * <code>DOCUMENTATION = 139 [(.gogoproto.enumvalue_customname) = "Documentation"];</code>
     */
    DOCUMENTATION(139),
    /**
     * <pre>
     * Whitespace
     * </pre>
     *
     * <code>WHITESPACE = 140 [(.gogoproto.enumvalue_customname) = "Whitespace"];</code>
     */
    WHITESPACE(140),
    /**
     * <pre>
     * Incomplete express that the semantic meaning of the node roles doesn't express
     * the full semantic information. Added in BIP-002.
     * </pre>
     *
     * <code>INCOMPLETE = 141 [(.gogoproto.enumvalue_customname) = "Incomplete"];</code>
     */
    INCOMPLETE(141),
    /**
     * <pre>
     * Unannotated will be automatically added by the SDK for nodes that did not receive
     * any annotations with the current version of the driver's `annotations.go` file.
     * Added in BIP-002.
     * </pre>
     *
     * <code>UNANNOTATED = 142 [(.gogoproto.enumvalue_customname) = "Unannotated"];</code>
     */
    UNANNOTATED(142),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Invalid Role is assigned as a zero value since protobuf enum definition must start at 0.
     * </pre>
     *
     * <code>INVALID = 0 [(.gogoproto.enumvalue_customname) = "Invalid"];</code>
     */
    public static final int INVALID_VALUE = 0;
    /**
     * <pre>
     * SimpleIdentifier is the most basic form of identifier, used for variable
     * names, functions, packages, etc.
     * </pre>
     *
     * <code>SIMPLE_IDENTIFIER = 1 [(.gogoproto.enumvalue_customname) = "SimpleIdentifier"];</code>
     */
    public static final int SIMPLE_IDENTIFIER_VALUE = 1;
    /**
     * <pre>
     * QualifiedIdentifier is form of identifier composed of multiple
     * SimpleIdentifier. One main identifier (usually the last one) and one
     * or more qualifiers.
     * </pre>
     *
     * <code>QUALIFIED_IDENTIFIER = 2 [(.gogoproto.enumvalue_customname) = "QualifiedIdentifier"];</code>
     */
    public static final int QUALIFIED_IDENTIFIER_VALUE = 2;
    /**
     * <pre>
     * BinaryExpression is the parent node of all binary expressions of any type. It must have
     * BinaryExpressionLeft, BinaryExpressionRight and BinaryExpressionOp children.
     * Those children must have aditional roles specifying the specific type (e.g. Expression,
     * QualifiedIdentifier or Literal for the left and right nodes and one of the specific operator roles
     * for the binary operator). BinaryExpresion can be considered a derivation of Expression and thus
     * could be its child or implemented as an additional node.
     * </pre>
     *
     * <code>BINARY_EXPRESSION = 3 [(.gogoproto.enumvalue_customname) = "BinaryExpression"];</code>
     */
    public static final int BINARY_EXPRESSION_VALUE = 3;
    /**
     * <code>BINARY_EXPRESSION_LEFT = 4 [(.gogoproto.enumvalue_customname) = "BinaryExpressionLeft"];</code>
     */
    public static final int BINARY_EXPRESSION_LEFT_VALUE = 4;
    /**
     * <code>BINARY_EXPRESSION_RIGHT = 5 [(.gogoproto.enumvalue_customname) = "BinaryExpressionRight"];</code>
     */
    public static final int BINARY_EXPRESSION_RIGHT_VALUE = 5;
    /**
     * <code>BINARY_EXPRESSION_OP = 6 [(.gogoproto.enumvalue_customname) = "BinaryExpressionOp"];</code>
     */
    public static final int BINARY_EXPRESSION_OP_VALUE = 6;
    /**
     * <pre>
     * Infix should mark the nodes which are parents of expression nodes using infix notation, e.g.: a+b.
     * Nodes without Infix or Postfix mark are considered in prefix order by default.
     * </pre>
     *
     * <code>INFIX = 7 [(.gogoproto.enumvalue_customname) = "Infix"];</code>
     */
    public static final int INFIX_VALUE = 7;
    /**
     * <pre>
     * Postfix should mark the nodes which are parents of nodes using postfix notation, e.g.: ab+.
     * Nodes without Infix or Postfix mark are considered in prefix order by default.
     * </pre>
     *
     * <code>POSTFIX = 8 [(.gogoproto.enumvalue_customname) = "Postfix"];</code>
     */
    public static final int POSTFIX_VALUE = 8;
    /**
     * <pre>
     * OpBitwiseLeftShift is the binary bitwise shift to the left operator (i.e. &lt;&lt; in most languages)
     * </pre>
     *
     * <code>OP_BITWISE_LEFT_SHIFT = 9 [(.gogoproto.enumvalue_customname) = "OpBitwiseLeftShift"];</code>
     */
    public static final int OP_BITWISE_LEFT_SHIFT_VALUE = 9;
    /**
     * <pre>
     * OpBitwiseRightShift is the binary bitwise shift to the right operator (i.e. &gt;&gt; in most languages)
     * </pre>
     *
     * <code>OP_BITWISE_RIGHT_SHIFT = 10 [(.gogoproto.enumvalue_customname) = "OpBitwiseRightShift"];</code>
     */
    public static final int OP_BITWISE_RIGHT_SHIFT_VALUE = 10;
    /**
     * <pre>
     * OpBitwiseUnsignedRightShift is the binary bitwise unsigned shift to the
     * right operator (e.g. &gt;&gt;&gt; in Java or C#)
     * </pre>
     *
     * <code>OP_BITWISE_UNSIGNED_RIGHT_SHIFT = 11 [(.gogoproto.enumvalue_customname) = "OpBitwiseUnsignedRightShift"];</code>
     */
    public static final int OP_BITWISE_UNSIGNED_RIGHT_SHIFT_VALUE = 11;
    /**
     * <pre>
     * OpBitwiseOr is the binary bitwise OR operator  (i.e. | in most languages)
     * </pre>
     *
     * <code>OP_BITWISE_OR = 12 [(.gogoproto.enumvalue_customname) = "OpBitwiseOr"];</code>
     */
    public static final int OP_BITWISE_OR_VALUE = 12;
    /**
     * <pre>
     * OpBitwiseXor is the binary bitwise Xor operator  (i.e. ~ in most languages)
     * </pre>
     *
     * <code>OP_BITWISE_XOR = 13 [(.gogoproto.enumvalue_customname) = "OpBitwiseXor"];</code>
     */
    public static final int OP_BITWISE_XOR_VALUE = 13;
    /**
     * <pre>
     * OpBitwiseAnd is the binary bitwise And/complement operator  (i.e. &amp; in most languages)
     * </pre>
     *
     * <code>OP_BITWISE_AND = 14 [(.gogoproto.enumvalue_customname) = "OpBitwiseAnd"];</code>
     */
    public static final int OP_BITWISE_AND_VALUE = 14;
    /**
     * <code>EXPRESSION = 15 [(.gogoproto.enumvalue_customname) = "Expression"];</code>
     */
    public static final int EXPRESSION_VALUE = 15;
    /**
     * <code>STATEMENT = 16 [(.gogoproto.enumvalue_customname) = "Statement"];</code>
     */
    public static final int STATEMENT_VALUE = 16;
    /**
     * <pre>
     * OpEqual is the operator that tests for logical equality between two expressions
     * </pre>
     *
     * <code>OP_EQUAL = 17 [(.gogoproto.enumvalue_customname) = "OpEqual"];</code>
     */
    public static final int OP_EQUAL_VALUE = 17;
    /**
     * <pre>
     * OpEqual is the operator that tests for logical inequality between two expressions
     * (i.e. != or != or &lt;&gt; in most languages).
     * </pre>
     *
     * <code>OP_NOT_EQUAL = 18 [(.gogoproto.enumvalue_customname) = "OpNotEqual"];</code>
     */
    public static final int OP_NOT_EQUAL_VALUE = 18;
    /**
     * <pre>
     * OpEqual is the operator that tests if the expression on the left is worth logically less
     * than the expression on the right. (i.e. &lt; in most languages).
     * </pre>
     *
     * <code>OP_LESS_THAN = 19 [(.gogoproto.enumvalue_customname) = "OpLessThan"];</code>
     */
    public static final int OP_LESS_THAN_VALUE = 19;
    /**
     * <pre>
     * OpEqual is the operator that tests if the expression on the left is worth logically less
     * or has equality with the expression on the right. (i.e. &gt;= in most languages).
     * </pre>
     *
     * <code>OP_LESS_THAN_EQUAL = 20 [(.gogoproto.enumvalue_customname) = "OpLessThanEqual"];</code>
     */
    public static final int OP_LESS_THAN_EQUAL_VALUE = 20;
    /**
     * <pre>
     * OpEqual is the operator that tests if the expression on the left is worth logically more
     * than the expression on the right. (i.e. &gt; in most languages).
     * </pre>
     *
     * <code>OP_GREATER_THAN = 21 [(.gogoproto.enumvalue_customname) = "OpGreaterThan"];</code>
     */
    public static final int OP_GREATER_THAN_VALUE = 21;
    /**
     * <pre>
     * OpEqual is the operator that tests if the expression on the left is worth logically more
     * or has equality with the expression on the right. (i.e. &gt;= in most languages).
     * </pre>
     *
     * <code>OP_GREATER_THAN_EQUAL = 22 [(.gogoproto.enumvalue_customname) = "OpGreaterThanEqual"];</code>
     */
    public static final int OP_GREATER_THAN_EQUAL_VALUE = 22;
    /**
     * <pre>
     * OpSame tests if the result of the expressions tested is the same object, like the "is"
     * operator in node or === in Javascript.
     * </pre>
     *
     * <code>OP_SAME = 23 [(.gogoproto.enumvalue_customname) = "OpSame"];</code>
     */
    public static final int OP_SAME_VALUE = 23;
    /**
     * <pre>
     * OpNotSame tests if the result of the expressions tested are different objects, like the "is not"
     * operator in node or !== in Javascript.
     * </pre>
     *
     * <code>OP_NOT_SAME = 24 [(.gogoproto.enumvalue_customname) = "OpNotSame"];</code>
     */
    public static final int OP_NOT_SAME_VALUE = 24;
    /**
     * <pre>
     * OpContains tests if the left expression result is contained inside, or has an item contained
     * with equality, the result of the expression of the right which usually will be a container type
     * (e.g. "in" in Python).
     * </pre>
     *
     * <code>OP_CONTAINS = 25 [(.gogoproto.enumvalue_customname) = "OpContains"];</code>
     */
    public static final int OP_CONTAINS_VALUE = 25;
    /**
     * <pre>
     * OpNotContains tests if the left expression result is not contained inside
     * the result of the expression of the right which usually will be a container type
     * (e.g. "not in" in Python).
     * </pre>
     *
     * <code>OP_NOT_CONTAINS = 26 [(.gogoproto.enumvalue_customname) = "OpNotContains"];</code>
     */
    public static final int OP_NOT_CONTAINS_VALUE = 26;
    /**
     * <pre>
     * OpPreIncrement increments in place the value before it is evaluated. It's
     * typical of C-inspired languages (e. g. ++x).
     * </pre>
     *
     * <code>OP_PRE_INCREMENT = 27 [(.gogoproto.enumvalue_customname) = "OpPreIncrement"];</code>
     */
    public static final int OP_PRE_INCREMENT_VALUE = 27;
    /**
     * <pre>
     * OpPostIncrement increments in place the value after it is evaluated. It's
     * typical of C-inspired languages (e. g. x++).
     * </pre>
     *
     * <code>OP_POST_INCREMENT = 28 [(.gogoproto.enumvalue_customname) = "OpPostIncrement"];</code>
     */
    public static final int OP_POST_INCREMENT_VALUE = 28;
    /**
     * <pre>
     * OpPreDecrement decrement in place the value before it is evaluated. It's
     * typical of C-inspired languages (e. g. --x).
     * </pre>
     *
     * <code>OP_PRE_DECREMENT = 29 [(.gogoproto.enumvalue_customname) = "OpPreDecrement"];</code>
     */
    public static final int OP_PRE_DECREMENT_VALUE = 29;
    /**
     * <pre>
     * OpPostDecrement decrement in place the value after it is evaluated. It's
     * typical of C-inspired languages (e. g. x--).
     * </pre>
     *
     * <code>OP_POST_DECREMENT = 30 [(.gogoproto.enumvalue_customname) = "OpPostDecrement"];</code>
     */
    public static final int OP_POST_DECREMENT_VALUE = 30;
    /**
     * <pre>
     * OpNegative changes the sign of the numeric type (e. g. -x in most languages).
     * </pre>
     *
     * <code>OP_NEGATIVE = 31 [(.gogoproto.enumvalue_customname) = "OpNegative"];</code>
     */
    public static final int OP_NEGATIVE_VALUE = 31;
    /**
     * <pre>
     * OpPositive usually is a no-op for basic numeric types but exists in the AST of some languages.
     * On some languages like C it could perform an aritmetic conversion to a signed type without
     * changing the sign or could be overloaded (e. g. +x).
     * </pre>
     *
     * <code>OP_POSITIVE = 32 [(.gogoproto.enumvalue_customname) = "OpPositive"];</code>
     */
    public static final int OP_POSITIVE_VALUE = 32;
    /**
     * <pre>
     * OpBitwiseComplement will invert all the bits of a type. (e. g. ~x in C-inspired languages).
     * </pre>
     *
     * <code>OP_BITWISE_COMPLEMENT = 33 [(.gogoproto.enumvalue_customname) = "OpBitwiseComplement"];</code>
     */
    public static final int OP_BITWISE_COMPLEMENT_VALUE = 33;
    /**
     * <pre>
     * OpDereference will get the actual value pointed by a pointer or reference type (e.g. *x).
     * </pre>
     *
     * <code>OP_DEREFERENCE = 34 [(.gogoproto.enumvalue_customname) = "OpDereference"];</code>
     */
    public static final int OP_DEREFERENCE_VALUE = 34;
    /**
     * <pre>
     * OpTakeAddress will get the memory address of the associated variable which will usually be
     * stored in a pointer or reference type (e. g. &amp;x).
     * </pre>
     *
     * <code>OP_TAKE_ADDRESS = 35 [(.gogoproto.enumvalue_customname) = "OpTakeAddress"];</code>
     */
    public static final int OP_TAKE_ADDRESS_VALUE = 35;
    /**
     * <pre>
     * File is the root node of a single file AST.
     * </pre>
     *
     * <code>FILE = 36 [(.gogoproto.enumvalue_customname) = "File"];</code>
     */
    public static final int FILE_VALUE = 36;
    /**
     * <pre>
     * OpBooleanAnd is the boolean AND operator (i.e. "and" or &amp;&amp; in most languages)
     * </pre>
     *
     * <code>OP_BOOLEAN_AND = 37 [(.gogoproto.enumvalue_customname) = "OpBooleanAnd"];</code>
     */
    public static final int OP_BOOLEAN_AND_VALUE = 37;
    /**
     * <pre>
     * OpBooleanOr is the boolean OR operator (i.e. "or" or || in most languages)
     * </pre>
     *
     * <code>OP_BOOLEAN_OR = 38 [(.gogoproto.enumvalue_customname) = "OpBooleanOr"];</code>
     */
    public static final int OP_BOOLEAN_OR_VALUE = 38;
    /**
     * <pre>
     * OpBooleanNot is the boolean NOT operator (i.e. "NOT" or ! in most languages)
     * </pre>
     *
     * <code>OP_BOOLEAN_NOT = 39 [(.gogoproto.enumvalue_customname) = "OpBooleanNot"];</code>
     */
    public static final int OP_BOOLEAN_NOT_VALUE = 39;
    /**
     * <pre>
     * OpBooleanXor is the boolean XOR operator (i.e. "XOR" or ^ in most languages)
     * </pre>
     *
     * <code>OP_BOOLEAN_XOR = 40 [(.gogoproto.enumvalue_customname) = "OpBooleanXor"];</code>
     */
    public static final int OP_BOOLEAN_XOR_VALUE = 40;
    /**
     * <pre>
     * OpAdd is the binary add operator (i.e. + in most languages).
     * </pre>
     *
     * <code>OP_ADD = 41 [(.gogoproto.enumvalue_customname) = "OpAdd"];</code>
     */
    public static final int OP_ADD_VALUE = 41;
    /**
     * <pre>
     * OpSubstract is the binary subtract operator (i.e. - in most languages).
     * </pre>
     *
     * <code>OP_SUBSTRACT = 42 [(.gogoproto.enumvalue_customname) = "OpSubstract"];</code>
     */
    public static final int OP_SUBSTRACT_VALUE = 42;
    /**
     * <pre>
     * OpMultiply is the binary multiply operator (i.e. * in most languages).
     * </pre>
     *
     * <code>OP_MULTIPLY = 43 [(.gogoproto.enumvalue_customname) = "OpMultiply"];</code>
     */
    public static final int OP_MULTIPLY_VALUE = 43;
    /**
     * <pre>
     * OpDivide is the binary division operator (i.e. / in most languages).
     * </pre>
     *
     * <code>OP_DIVIDE = 44 [(.gogoproto.enumvalue_customname) = "OpDivide"];</code>
     */
    public static final int OP_DIVIDE_VALUE = 44;
    /**
     * <pre>
     * OpMod is the binary division module operator (i.e. % or "mod" in most languages).
     * </pre>
     *
     * <code>OP_MOD = 45 [(.gogoproto.enumvalue_customname) = "OpMod"];</code>
     */
    public static final int OP_MOD_VALUE = 45;
    /**
     * <pre>
     * PackageDeclaration identifies the package that all its children
     * belong to. Its children include, at least, QualifiedIdentifier or
     * SimpleIdentifier with the package name.
     * </pre>
     *
     * <code>PACKAGE_DECLARATION = 46 [(.gogoproto.enumvalue_customname) = "PackageDeclaration"];</code>
     */
    public static final int PACKAGE_DECLARATION_VALUE = 46;
    /**
     * <pre>
     * ImportDeclaration represents the import of another package in the
     * current scope. Its children may include an ImportPath and ImportInclude.
     * </pre>
     *
     * <code>IMPORT_DECLARATION = 47 [(.gogoproto.enumvalue_customname) = "ImportDeclaration"];</code>
     */
    public static final int IMPORT_DECLARATION_VALUE = 47;
    /**
     * <pre>
     * ImportPath is the (usually) fully qualified package name to import.
     * </pre>
     *
     * <code>IMPORT_PATH = 48 [(.gogoproto.enumvalue_customname) = "ImportPath"];</code>
     */
    public static final int IMPORT_PATH_VALUE = 48;
    /**
     * <pre>
     * ImportAlias is an identifier used as an alias for an imported package
     * in a certain scope.
     * </pre>
     *
     * <code>IMPORT_ALIAS = 49 [(.gogoproto.enumvalue_customname) = "ImportAlias"];</code>
     */
    public static final int IMPORT_ALIAS_VALUE = 49;
    /**
     * <pre>
     * FunctionDeclaration is the parent node of all function or method declarations. It should have a
     * FunctionDeclarationName, a FunctionDeclarationBody (except for pure declarations like the ones in C/C++
     * header files or forward declarations in other languages) and, if the function has formal arguments,
     * FunctionDeclarationArgument children.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION = 50 [(.gogoproto.enumvalue_customname) = "FunctionDeclaration"];</code>
     */
    public static final int FUNCTION_DECLARATION_VALUE = 50;
    /**
     * <pre>
     * FunctionDeclarationBody is the grouping node for all nodes in the function body.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_BODY = 51 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationBody"];</code>
     */
    public static final int FUNCTION_DECLARATION_BODY_VALUE = 51;
    /**
     * <pre>
     * FunctionDeclarationName contains the unqualified name of the function.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_NAME = 52 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationName"];</code>
     */
    public static final int FUNCTION_DECLARATION_NAME_VALUE = 52;
    /**
     * <pre>
     * FunctionDeclarationReceiver is the target Type of a method or struct.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_RECEIVER = 53 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationReceiver"];</code>
     */
    public static final int FUNCTION_DECLARATION_RECEIVER_VALUE = 53;
    /**
     * <pre>
     * FunctionDeclarationArgument is the parent node for the function formal arguments. The name will be
     * specified as the token of the child FunctionDeclarationArgumentName and depending on the language it
     * could have one or more child nodes of different types to implement them in the UAST like
     * FunctionDeclarationArgumentDefaultValue, type declarations (TODO), annotations (TODO), etc.
     * FunctionDeclarationArguments
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_ARGUMENT = 54 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationArgument"];</code>
     */
    public static final int FUNCTION_DECLARATION_ARGUMENT_VALUE = 54;
    /**
     * <pre>
     * FunctionDeclarationArgumentName is the symbolic name of the argument. On languages that support
     * argument passing by name this will be the name used by the CallNamedArgument roles.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_ARGUMENT_NAME = 55 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationArgumentName"];</code>
     */
    public static final int FUNCTION_DECLARATION_ARGUMENT_NAME_VALUE = 55;
    /**
     * <pre>
     * For languages that support setting a default value for a formal argument,
     * FunctionDeclarationArgumentDefaultValue is the node that contains the default value.
     * Depending on the language his child node representing the actual value could be some kind or
     * literal or even expressions that can resolved at runtime (if interpreted) or compile time.
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_ARGUMENT_DEFAULT_VALUE = 56 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationArgumentDefaultValue"];</code>
     */
    public static final int FUNCTION_DECLARATION_ARGUMENT_DEFAULT_VALUE_VALUE = 56;
    /**
     * <pre>
     * FunctionDeclarationVarArgsList is the node representing whatever syntax the language has to
     * indicate that from that point in the argument list the function can get a variable number
     * of arguments (e.g. "..." in C-ish languages, "Object..." in Java, "*args" in Python, etc).
     * </pre>
     *
     * <code>FUNCTION_DECLARATION_VAR_ARGS_LIST = 57 [(.gogoproto.enumvalue_customname) = "FunctionDeclarationVarArgsList"];</code>
     */
    public static final int FUNCTION_DECLARATION_VAR_ARGS_LIST_VALUE = 57;
    /**
     * <pre>
     * TypeDeclaration is the declaration of a type. It could be a class or
     * interface in Java, a struct, interface or alias in Go, etc. Except for pure or forward declarations
     * it will usually have a TypeDeclarationBody child and for OOP languages a TypeDeclarationBases and/or
     * TypeDeclarationInterfaces.
     * </pre>
     *
     * <code>TYPE_DECLARATION = 58 [(.gogoproto.enumvalue_customname) = "TypeDeclaration"];</code>
     */
    public static final int TYPE_DECLARATION_VALUE = 58;
    /**
     * <code>TYPE_DECLARATION_BODY = 59 [(.gogoproto.enumvalue_customname) = "TypeDeclarationBody"];</code>
     */
    public static final int TYPE_DECLARATION_BODY_VALUE = 59;
    /**
     * <pre>
     * TypeDeclarationBases are the Types that the current inherits from in OOP languages.
     * </pre>
     *
     * <code>TYPE_DECLARATION_BASES = 60 [(.gogoproto.enumvalue_customname) = "TypeDeclarationBases"];</code>
     */
    public static final int TYPE_DECLARATION_BASES_VALUE = 60;
    /**
     * <pre>
     * TypeDeclarationImplements are the Types (usually interfaces) that the Type implements.
     * </pre>
     *
     * <code>TYPE_DECLARATION_IMPLEMENTS = 61 [(.gogoproto.enumvalue_customname) = "TypeDeclarationImplements"];</code>
     */
    public static final int TYPE_DECLARATION_IMPLEMENTS_VALUE = 61;
    /**
     * <pre>
     * VisibleFromInstance marks modifiers that declare visibility from instance.
     * </pre>
     *
     * <code>VISIBLE_FROM_INSTANCE = 62 [(.gogoproto.enumvalue_customname) = "VisibleFromInstance"];</code>
     */
    public static final int VISIBLE_FROM_INSTANCE_VALUE = 62;
    /**
     * <pre>
     * VisibleFromType marks modifiers that declare visibility from the same
     * type (e.g. class, trait).
     * Implies VisibleFromInstance.
     * </pre>
     *
     * <code>VISIBLE_FROM_TYPE = 63 [(.gogoproto.enumvalue_customname) = "VisibleFromType"];</code>
     */
    public static final int VISIBLE_FROM_TYPE_VALUE = 63;
    /**
     * <pre>
     * VisibleFromSubtype marks modifiers that declare visibility from
     * subtypes (e.g. subclasses).
     * Implies VisibleFromInstance and VisibleFromType.
     * </pre>
     *
     * <code>VISIBLE_FROM_SUBTYPE = 64 [(.gogoproto.enumvalue_customname) = "VisibleFromSubtype"];</code>
     */
    public static final int VISIBLE_FROM_SUBTYPE_VALUE = 64;
    /**
     * <pre>
     * VisibleFromSubpackage marks modifiers that declare visibility from the
     * same package.
     * </pre>
     *
     * <code>VISIBLE_FROM_PACKAGE = 65 [(.gogoproto.enumvalue_customname) = "VisibleFromPackage"];</code>
     */
    public static final int VISIBLE_FROM_PACKAGE_VALUE = 65;
    /**
     * <pre>
     * VisibleFromSubpackage marks modifiers that declare visibility from
     * subpackages.
     * Implies VisibleFromInstance, VisibleFromType and VisibleFromPackage.
     * </pre>
     *
     * <code>VISIBLE_FROM_SUBPACKAGE = 66 [(.gogoproto.enumvalue_customname) = "VisibleFromSubpackage"];</code>
     */
    public static final int VISIBLE_FROM_SUBPACKAGE_VALUE = 66;
    /**
     * <pre>
     * VisibleFromModule marks modifiers that declare visibility from the
     * same module (e.g. Java JAR).
     * Implies VisibleFromInstance and VisibleFromType.
     * </pre>
     *
     * <code>VISIBLE_FROM_MODULE = 67 [(.gogoproto.enumvalue_customname) = "VisibleFromModule"];</code>
     */
    public static final int VISIBLE_FROM_MODULE_VALUE = 67;
    /**
     * <pre>
     * VisibleFromFriend marks modifiers that declare visibility from friends
     * (e.g. C++ friends).
     * Implies VisibleFromInstance and VisibleFromType.
     * </pre>
     *
     * <code>VISIBLE_FROM_FRIEND = 68 [(.gogoproto.enumvalue_customname) = "VisibleFromFriend"];</code>
     */
    public static final int VISIBLE_FROM_FRIEND_VALUE = 68;
    /**
     * <pre>
     * VisibleFromWorld implies full public visibility. Implies all other
     * visibility levels.
     * </pre>
     *
     * <code>VISIBLE_FROM_WORLD = 69 [(.gogoproto.enumvalue_customname) = "VisibleFromWorld"];</code>
     */
    public static final int VISIBLE_FROM_WORLD_VALUE = 69;
    /**
     * <pre>
     * If is used for if-then[-else] statements or expressions.
     * An if-then tree will look like:
     * 
     * 	IfStatement {
     * 		**[non-If nodes] {
     * 			IfCondition {
     * 				[...]
     *                      }
     * 		}
     * 		**[non-If* nodes] {
     * 			IfBody {
     * 				[...]
     * 			}
     * 		}
     * 		**[non-If* nodes] {
     * 			IfElse {
     * 				[...]
     * 			}
     * 		}
     * 	}
     * 
     * The IfElse node is optional. The order of IfCondition, IfBody and
     * IfElse is not defined.
     * </pre>
     *
     * <code>IF = 70 [(.gogoproto.enumvalue_customname) = "If"];</code>
     */
    public static final int IF_VALUE = 70;
    /**
     * <pre>
     * IfCondition is a condition in an IfStatement or IfExpression.
     * </pre>
     *
     * <code>IF_CONDITION = 71 [(.gogoproto.enumvalue_customname) = "IfCondition"];</code>
     */
    public static final int IF_CONDITION_VALUE = 71;
    /**
     * <pre>
     * IfBody is the code following a then clause in an IfStatement or
     * IfExpression.
     * </pre>
     *
     * <code>IF_BODY = 72 [(.gogoproto.enumvalue_customname) = "IfBody"];</code>
     */
    public static final int IF_BODY_VALUE = 72;
    /**
     * <pre>
     * IfBody is the code following a else clause in an IfStatement or
     * IfExpression.
     * </pre>
     *
     * <code>IF_ELSE = 73 [(.gogoproto.enumvalue_customname) = "IfElse"];</code>
     */
    public static final int IF_ELSE_VALUE = 73;
    /**
     * <pre>
     * Switch is used to represent a broad of switch flavors. An expression
     * is evaluated and then compared to the values returned by different
     * case expressions, executing a body associated to the first case that
     * matches. Similar constructions that go beyond expression comparison
     * (such as pattern matching in Scala's match) should not be annotated
     * with Switch.
     * 
     * TODO: We still have to decide how to annotate fallthrough and
     *      non-fallthrough variants. As well as crazy variants such as Perl
     *      and Bash with its optional fallthrough.
     * </pre>
     *
     * <code>SWITCH = 74 [(.gogoproto.enumvalue_customname) = "Switch"];</code>
     */
    public static final int SWITCH_VALUE = 74;
    /**
     * <code>SWITCH_CASE = 75 [(.gogoproto.enumvalue_customname) = "SwitchCase"];</code>
     */
    public static final int SWITCH_CASE_VALUE = 75;
    /**
     * <code>SWITCH_CASE_CONDITION = 76 [(.gogoproto.enumvalue_customname) = "SwitchCaseCondition"];</code>
     */
    public static final int SWITCH_CASE_CONDITION_VALUE = 76;
    /**
     * <code>SWITCH_CASE_BODY = 77 [(.gogoproto.enumvalue_customname) = "SwitchCaseBody"];</code>
     */
    public static final int SWITCH_CASE_BODY_VALUE = 77;
    /**
     * <code>SWITCH_DEFAULT = 78 [(.gogoproto.enumvalue_customname) = "SwitchDefault"];</code>
     */
    public static final int SWITCH_DEFAULT_VALUE = 78;
    /**
     * <code>FOR = 79 [(.gogoproto.enumvalue_customname) = "For"];</code>
     */
    public static final int FOR_VALUE = 79;
    /**
     * <code>FOR_INIT = 80 [(.gogoproto.enumvalue_customname) = "ForInit"];</code>
     */
    public static final int FOR_INIT_VALUE = 80;
    /**
     * <code>FOR_EXPRESSION = 81 [(.gogoproto.enumvalue_customname) = "ForExpression"];</code>
     */
    public static final int FOR_EXPRESSION_VALUE = 81;
    /**
     * <code>FOR_UPDATE = 82 [(.gogoproto.enumvalue_customname) = "ForUpdate"];</code>
     */
    public static final int FOR_UPDATE_VALUE = 82;
    /**
     * <code>FOR_BODY = 83 [(.gogoproto.enumvalue_customname) = "ForBody"];</code>
     */
    public static final int FOR_BODY_VALUE = 83;
    /**
     * <code>FOR_EACH = 84 [(.gogoproto.enumvalue_customname) = "ForEach"];</code>
     */
    public static final int FOR_EACH_VALUE = 84;
    /**
     * <code>WHILE = 85 [(.gogoproto.enumvalue_customname) = "While"];</code>
     */
    public static final int WHILE_VALUE = 85;
    /**
     * <code>WHILE_CONDITION = 86 [(.gogoproto.enumvalue_customname) = "WhileCondition"];</code>
     */
    public static final int WHILE_CONDITION_VALUE = 86;
    /**
     * <code>WHILE_BODY = 87 [(.gogoproto.enumvalue_customname) = "WhileBody"];</code>
     */
    public static final int WHILE_BODY_VALUE = 87;
    /**
     * <code>DO_WHILE = 88 [(.gogoproto.enumvalue_customname) = "DoWhile"];</code>
     */
    public static final int DO_WHILE_VALUE = 88;
    /**
     * <code>DO_WHILE_CONDITION = 89 [(.gogoproto.enumvalue_customname) = "DoWhileCondition"];</code>
     */
    public static final int DO_WHILE_CONDITION_VALUE = 89;
    /**
     * <code>DO_WHILE_BODY = 90 [(.gogoproto.enumvalue_customname) = "DoWhileBody"];</code>
     */
    public static final int DO_WHILE_BODY_VALUE = 90;
    /**
     * <code>BREAK = 91 [(.gogoproto.enumvalue_customname) = "Break"];</code>
     */
    public static final int BREAK_VALUE = 91;
    /**
     * <code>CONTINUE = 92 [(.gogoproto.enumvalue_customname) = "Continue"];</code>
     */
    public static final int CONTINUE_VALUE = 92;
    /**
     * <code>GOTO = 93 [(.gogoproto.enumvalue_customname) = "Goto"];</code>
     */
    public static final int GOTO_VALUE = 93;
    /**
     * <pre>
     * Block is a group of statements. If the source language has block scope,
     * it should be annotated both with Block and BlockScope.
     * </pre>
     *
     * <code>BLOCK = 94 [(.gogoproto.enumvalue_customname) = "Block"];</code>
     */
    public static final int BLOCK_VALUE = 94;
    /**
     * <pre>
     * BlockScope is a block with its own block scope.
     * TODO: Should we replace BlockScope with a more general Scope role that
     *       can be combined with Block?
     * </pre>
     *
     * <code>BLOCK_SCOPE = 95 [(.gogoproto.enumvalue_customname) = "BlockScope"];</code>
     */
    public static final int BLOCK_SCOPE_VALUE = 95;
    /**
     * <pre>
     * Return is a return statement. It might have a child expression or not
     * as with naked returns in Go or return in void methods in Java.
     * </pre>
     *
     * <code>RETURN = 96 [(.gogoproto.enumvalue_customname) = "Return"];</code>
     */
    public static final int RETURN_VALUE = 96;
    /**
     * <code>TRY = 97 [(.gogoproto.enumvalue_customname) = "Try"];</code>
     */
    public static final int TRY_VALUE = 97;
    /**
     * <code>TRY_BODY = 98 [(.gogoproto.enumvalue_customname) = "TryBody"];</code>
     */
    public static final int TRY_BODY_VALUE = 98;
    /**
     * <code>TRY_CATCH = 99 [(.gogoproto.enumvalue_customname) = "TryCatch"];</code>
     */
    public static final int TRY_CATCH_VALUE = 99;
    /**
     * <code>TRY_FINALLY = 100 [(.gogoproto.enumvalue_customname) = "TryFinally"];</code>
     */
    public static final int TRY_FINALLY_VALUE = 100;
    /**
     * <code>THROW = 101 [(.gogoproto.enumvalue_customname) = "Throw"];</code>
     */
    public static final int THROW_VALUE = 101;
    /**
     * <pre>
     * Assert checks if an expression is true and if it is not, it signals
     * an error/exception, possibly stopping the execution.
     * </pre>
     *
     * <code>ASSERT = 102 [(.gogoproto.enumvalue_customname) = "Assert"];</code>
     */
    public static final int ASSERT_VALUE = 102;
    /**
     * <pre>
     * Call is any call, whether it is a function, procedure, method or macro.
     * In its simplest form, a call will have a single child with a function
     * name (CallCallee). Arguments are marked with CallPositionalArgument
     * and CallNamedArgument. In OO languages there is usually a CallReceiver
     * too.
     * </pre>
     *
     * <code>CALL = 103 [(.gogoproto.enumvalue_customname) = "Call"];</code>
     */
    public static final int CALL_VALUE = 103;
    /**
     * <pre>
     * CallReceiver is an optional expression receiving the call. This
     * corresponds to the method invocant in OO languages, receiving in Go, etc.
     * </pre>
     *
     * <code>CALL_RECEIVER = 104 [(.gogoproto.enumvalue_customname) = "CallReceiver"];</code>
     */
    public static final int CALL_RECEIVER_VALUE = 104;
    /**
     * <pre>
     * CallCallee is the callable being called. It might be the name of a
     * function or procedure, it might be a method, it might a simple name
     * or qualified with a namespace.
     * </pre>
     *
     * <code>CALL_CALLEE = 105 [(.gogoproto.enumvalue_customname) = "CallCallee"];</code>
     */
    public static final int CALL_CALLEE_VALUE = 105;
    /**
     * <pre>
     * CallPositionalArgument is a positional argument in a call.
     * </pre>
     *
     * <code>CALL_POSITIONAL_ARGUMENT = 106 [(.gogoproto.enumvalue_customname) = "CallPositionalArgument"];</code>
     */
    public static final int CALL_POSITIONAL_ARGUMENT_VALUE = 106;
    /**
     * <pre>
     * CallNamedArgument is a named argument in a call. It should have a
     * child with role CallNamedArgumentName and another child with role
     * CallNamedArgumentValue.
     * </pre>
     *
     * <code>CALL_NAMED_ARGUMENT = 107 [(.gogoproto.enumvalue_customname) = "CallNamedArgument"];</code>
     */
    public static final int CALL_NAMED_ARGUMENT_VALUE = 107;
    /**
     * <pre>
     * CallNamedArgumentName is the name of a named argument.
     * </pre>
     *
     * <code>CALL_NAMED_ARGUMENT_NAME = 108 [(.gogoproto.enumvalue_customname) = "CallNamedArgumentName"];</code>
     */
    public static final int CALL_NAMED_ARGUMENT_NAME_VALUE = 108;
    /**
     * <pre>
     * CallNamedArgumentValue is the value of a named argument.
     * </pre>
     *
     * <code>CALL_NAMED_ARGUMENT_VALUE = 109 [(.gogoproto.enumvalue_customname) = "CallNamedArgumentValue"];</code>
     */
    public static final int CALL_NAMED_ARGUMENT_VALUE_VALUE = 109;
    /**
     * <code>NOOP = 110 [(.gogoproto.enumvalue_customname) = "Noop"];</code>
     */
    public static final int NOOP_VALUE = 110;
    /**
     * <pre>
     * BooleanLiteral is a boolean literal. It is expected that BooleanLiteral
     * nodes contain a token with some form of boolean literal (e.g. true,
     * false, yes, no, 1, 0).
     * </pre>
     *
     * <code>BOOLEAN_LITERAL = 111 [(.gogoproto.enumvalue_customname) = "BooleanLiteral"];</code>
     */
    public static final int BOOLEAN_LITERAL_VALUE = 111;
    /**
     * <pre>
     * ByteLiteral is a single-byte literal. For example, in Rust.
     * </pre>
     *
     * <code>BYTE_LITERAL = 112 [(.gogoproto.enumvalue_customname) = "ByteLiteral"];</code>
     */
    public static final int BYTE_LITERAL_VALUE = 112;
    /**
     * <pre>
     * ByteStringLiteral is a literal for a raw byte string. For example, in Rust.
     * </pre>
     *
     * <code>BYTE_STRING_LITERAL = 113 [(.gogoproto.enumvalue_customname) = "ByteStringLiteral"];</code>
     */
    public static final int BYTE_STRING_LITERAL_VALUE = 113;
    /**
     * <pre>
     * CharacterLiteral is a character literal. It is expected that
     * CharacterLiteral nodes contain a token with a single character with
     * optional quoting (e.g. c, 'c', "c").
     * </pre>
     *
     * <code>CHARACTER_LITERAL = 114 [(.gogoproto.enumvalue_customname) = "CharacterLiteral"];</code>
     */
    public static final int CHARACTER_LITERAL_VALUE = 114;
    /**
     * <pre>
     * ListLiteral is a literal array or list.
     * </pre>
     *
     * <code>LIST_LITERAL = 115 [(.gogoproto.enumvalue_customname) = "ListLiteral"];</code>
     */
    public static final int LIST_LITERAL_VALUE = 115;
    /**
     * <pre>
     * MapLiteral is a literal map-like structure.
     * </pre>
     *
     * <code>MAP_LITERAL = 116 [(.gogoproto.enumvalue_customname) = "MapLiteral"];</code>
     */
    public static final int MAP_LITERAL_VALUE = 116;
    /**
     * <pre>
     * NullLiteral is a null literal. It is expected that NullLiteral nodes
     * contain a token equivalent to null (e.g. null, nil, None).
     * </pre>
     *
     * <code>NULL_LITERAL = 117 [(.gogoproto.enumvalue_customname) = "NullLiteral"];</code>
     */
    public static final int NULL_LITERAL_VALUE = 117;
    /**
     * <pre>
     * NumberLiteral is a numeric literal. This applies to any numeric literal
     * whether it is integer or float, any base, scientific notation or not,
     * etc.
     * </pre>
     *
     * <code>NUMBER_LITERAL = 118 [(.gogoproto.enumvalue_customname) = "NumberLiteral"];</code>
     */
    public static final int NUMBER_LITERAL_VALUE = 118;
    /**
     * <pre>
     * RegexpLiteral is a literal for a regular expression.
     * </pre>
     *
     * <code>REGEXP_LITERAL = 119 [(.gogoproto.enumvalue_customname) = "RegexpLiteral"];</code>
     */
    public static final int REGEXP_LITERAL_VALUE = 119;
    /**
     * <pre>
     * SetLiteral is a literal for a set. For example, in Python 3.
     * </pre>
     *
     * <code>SET_LITERAL = 120 [(.gogoproto.enumvalue_customname) = "SetLiteral"];</code>
     */
    public static final int SET_LITERAL_VALUE = 120;
    /**
     * <pre>
     * StringLiteral is a string literal. This applies both to single-line and
     * multi-line literals and it does not imply any particular encoding.
     * 
     * TODO: Decide what to do with interpolated strings.
     * </pre>
     *
     * <code>STRING_LITERAL = 121 [(.gogoproto.enumvalue_customname) = "StringLiteral"];</code>
     */
    public static final int STRING_LITERAL_VALUE = 121;
    /**
     * <pre>
     * TupleLiteral is a literal for a tuple. For example, in Python and Scala.
     * </pre>
     *
     * <code>TUPLE_LITERAL = 122 [(.gogoproto.enumvalue_customname) = "TupleLiteral"];</code>
     */
    public static final int TUPLE_LITERAL_VALUE = 122;
    /**
     * <pre>
     * TypeLiteral is a literal that identifies a type. It might contain a
     * token with the type literal itself, or children that define the type.
     * </pre>
     *
     * <code>TYPE_LITERAL = 123 [(.gogoproto.enumvalue_customname) = "TypeLiteral"];</code>
     */
    public static final int TYPE_LITERAL_VALUE = 123;
    /**
     * <pre>
     * OtherLiteral is a literal of a type not covered by other literal
     * annotations.
     * </pre>
     *
     * <code>OTHER_LITERAL = 124 [(.gogoproto.enumvalue_customname) = "OtherLiteral"];</code>
     */
    public static final int OTHER_LITERAL_VALUE = 124;
    /**
     * <pre>
     * MapEntry is the expression pairing a map key and a value usually on MapLiteral expressions. It must
     * have both a MapKey and a MapValue children (e.g. {"key": "value", "otherkey": "otherval"} in Python).
     * </pre>
     *
     * <code>MAP_ENTRY = 125 [(.gogoproto.enumvalue_customname) = "MapEntry"];</code>
     */
    public static final int MAP_ENTRY_VALUE = 125;
    /**
     * <code>MAP_KEY = 126 [(.gogoproto.enumvalue_customname) = "MapKey"];</code>
     */
    public static final int MAP_KEY_VALUE = 126;
    /**
     * <code>MAP_VALUE = 127 [(.gogoproto.enumvalue_customname) = "MapValue"];</code>
     */
    public static final int MAP_VALUE_VALUE = 127;
    /**
     * <code>TYPE = 128 [(.gogoproto.enumvalue_customname) = "Type"];</code>
     */
    public static final int TYPE_VALUE = 128;
    /**
     * <pre>
     * TODO: should we distinguish between primitive and builtin types?
     * </pre>
     *
     * <code>PRIMITIVE_TYPE = 129 [(.gogoproto.enumvalue_customname) = "PrimitiveType"];</code>
     */
    public static final int PRIMITIVE_TYPE_VALUE = 129;
    /**
     * <pre>
     * Assignment represents a variable assignment or binding.
     * The variable that is being assigned to is annotated with the
     * AssignmentVariable role, while the value is annotated with
     * AssignmentValue.
     * </pre>
     *
     * <code>ASSIGNMENT = 130 [(.gogoproto.enumvalue_customname) = "Assignment"];</code>
     */
    public static final int ASSIGNMENT_VALUE = 130;
    /**
     * <code>ASSIGNMENT_VARIABLE = 131 [(.gogoproto.enumvalue_customname) = "AssignmentVariable"];</code>
     */
    public static final int ASSIGNMENT_VARIABLE_VALUE = 131;
    /**
     * <code>ASSIGNMENT_VALUE = 132 [(.gogoproto.enumvalue_customname) = "AssignmentValue"];</code>
     */
    public static final int ASSIGNMENT_VALUE_VALUE = 132;
    /**
     * <pre>
     * AugmentedAssignment is an augmented assignment usually combining the equal operator with
     * another one (e. g. +=, -=, *=, etc). It is expected that children contains an
     * AugmentedAssignmentOperator with a child or aditional role for the specific Bitwise or
     * Arithmetic operator used. The AugmentedAssignmentVariable and AugmentedAssignmentValue roles
     * have the same meaning than in Assignment.
     * </pre>
     *
     * <code>AUGMENTED_ASSIGNMENT = 133 [(.gogoproto.enumvalue_customname) = "AugmentedAssignment"];</code>
     */
    public static final int AUGMENTED_ASSIGNMENT_VALUE = 133;
    /**
     * <code>AUGMENTED_ASSIGNMENT_OPERATOR = 134 [(.gogoproto.enumvalue_customname) = "AugmentedAssignmentOperator"];</code>
     */
    public static final int AUGMENTED_ASSIGNMENT_OPERATOR_VALUE = 134;
    /**
     * <code>AUGMENTED_ASSIGNMENT_VARIABLE = 135 [(.gogoproto.enumvalue_customname) = "AugmentedAssignmentVariable"];</code>
     */
    public static final int AUGMENTED_ASSIGNMENT_VARIABLE_VALUE = 135;
    /**
     * <code>AUGMENTED_ASSIGNMENT_VALUE = 136 [(.gogoproto.enumvalue_customname) = "AugmentedAssignmentValue"];</code>
     */
    public static final int AUGMENTED_ASSIGNMENT_VALUE_VALUE = 136;
    /**
     * <pre>
     * This represents the self-reference of an object instance in
     * one of its methods. This corresponds to the `this` keyword
     * (e.g. Java, C++, PHP), `self` (e.g. Smalltalk, Perl, Swift) and `Me`
     * (e.g. Visual Basic).
     * </pre>
     *
     * <code>THIS = 137 [(.gogoproto.enumvalue_customname) = "This"];</code>
     */
    public static final int THIS_VALUE = 137;
    /**
     * <code>COMMENT = 138 [(.gogoproto.enumvalue_customname) = "Comment"];</code>
     */
    public static final int COMMENT_VALUE = 138;
    /**
     * <pre>
     * Documentation is a node that represents documentation of another node,
     * such as function or package. Documentation is usually in the form of
     * a string in certain position (e.g. Python docstring) or comment
     * (e.g. Javadoc, godoc).
     * </pre>
     *
     * <code>DOCUMENTATION = 139 [(.gogoproto.enumvalue_customname) = "Documentation"];</code>
     */
    public static final int DOCUMENTATION_VALUE = 139;
    /**
     * <pre>
     * Whitespace
     * </pre>
     *
     * <code>WHITESPACE = 140 [(.gogoproto.enumvalue_customname) = "Whitespace"];</code>
     */
    public static final int WHITESPACE_VALUE = 140;
    /**
     * <pre>
     * Incomplete express that the semantic meaning of the node roles doesn't express
     * the full semantic information. Added in BIP-002.
     * </pre>
     *
     * <code>INCOMPLETE = 141 [(.gogoproto.enumvalue_customname) = "Incomplete"];</code>
     */
    public static final int INCOMPLETE_VALUE = 141;
    /**
     * <pre>
     * Unannotated will be automatically added by the SDK for nodes that did not receive
     * any annotations with the current version of the driver's `annotations.go` file.
     * Added in BIP-002.
     * </pre>
     *
     * <code>UNANNOTATED = 142 [(.gogoproto.enumvalue_customname) = "Unannotated"];</code>
     */
    public static final int UNANNOTATED_VALUE = 142;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Role valueOf(int value) {
      return forNumber(value);
    }

    public static Role forNumber(int value) {
      switch (value) {
        case 0: return INVALID;
        case 1: return SIMPLE_IDENTIFIER;
        case 2: return QUALIFIED_IDENTIFIER;
        case 3: return BINARY_EXPRESSION;
        case 4: return BINARY_EXPRESSION_LEFT;
        case 5: return BINARY_EXPRESSION_RIGHT;
        case 6: return BINARY_EXPRESSION_OP;
        case 7: return INFIX;
        case 8: return POSTFIX;
        case 9: return OP_BITWISE_LEFT_SHIFT;
        case 10: return OP_BITWISE_RIGHT_SHIFT;
        case 11: return OP_BITWISE_UNSIGNED_RIGHT_SHIFT;
        case 12: return OP_BITWISE_OR;
        case 13: return OP_BITWISE_XOR;
        case 14: return OP_BITWISE_AND;
        case 15: return EXPRESSION;
        case 16: return STATEMENT;
        case 17: return OP_EQUAL;
        case 18: return OP_NOT_EQUAL;
        case 19: return OP_LESS_THAN;
        case 20: return OP_LESS_THAN_EQUAL;
        case 21: return OP_GREATER_THAN;
        case 22: return OP_GREATER_THAN_EQUAL;
        case 23: return OP_SAME;
        case 24: return OP_NOT_SAME;
        case 25: return OP_CONTAINS;
        case 26: return OP_NOT_CONTAINS;
        case 27: return OP_PRE_INCREMENT;
        case 28: return OP_POST_INCREMENT;
        case 29: return OP_PRE_DECREMENT;
        case 30: return OP_POST_DECREMENT;
        case 31: return OP_NEGATIVE;
        case 32: return OP_POSITIVE;
        case 33: return OP_BITWISE_COMPLEMENT;
        case 34: return OP_DEREFERENCE;
        case 35: return OP_TAKE_ADDRESS;
        case 36: return FILE;
        case 37: return OP_BOOLEAN_AND;
        case 38: return OP_BOOLEAN_OR;
        case 39: return OP_BOOLEAN_NOT;
        case 40: return OP_BOOLEAN_XOR;
        case 41: return OP_ADD;
        case 42: return OP_SUBSTRACT;
        case 43: return OP_MULTIPLY;
        case 44: return OP_DIVIDE;
        case 45: return OP_MOD;
        case 46: return PACKAGE_DECLARATION;
        case 47: return IMPORT_DECLARATION;
        case 48: return IMPORT_PATH;
        case 49: return IMPORT_ALIAS;
        case 50: return FUNCTION_DECLARATION;
        case 51: return FUNCTION_DECLARATION_BODY;
        case 52: return FUNCTION_DECLARATION_NAME;
        case 53: return FUNCTION_DECLARATION_RECEIVER;
        case 54: return FUNCTION_DECLARATION_ARGUMENT;
        case 55: return FUNCTION_DECLARATION_ARGUMENT_NAME;
        case 56: return FUNCTION_DECLARATION_ARGUMENT_DEFAULT_VALUE;
        case 57: return FUNCTION_DECLARATION_VAR_ARGS_LIST;
        case 58: return TYPE_DECLARATION;
        case 59: return TYPE_DECLARATION_BODY;
        case 60: return TYPE_DECLARATION_BASES;
        case 61: return TYPE_DECLARATION_IMPLEMENTS;
        case 62: return VISIBLE_FROM_INSTANCE;
        case 63: return VISIBLE_FROM_TYPE;
        case 64: return VISIBLE_FROM_SUBTYPE;
        case 65: return VISIBLE_FROM_PACKAGE;
        case 66: return VISIBLE_FROM_SUBPACKAGE;
        case 67: return VISIBLE_FROM_MODULE;
        case 68: return VISIBLE_FROM_FRIEND;
        case 69: return VISIBLE_FROM_WORLD;
        case 70: return IF;
        case 71: return IF_CONDITION;
        case 72: return IF_BODY;
        case 73: return IF_ELSE;
        case 74: return SWITCH;
        case 75: return SWITCH_CASE;
        case 76: return SWITCH_CASE_CONDITION;
        case 77: return SWITCH_CASE_BODY;
        case 78: return SWITCH_DEFAULT;
        case 79: return FOR;
        case 80: return FOR_INIT;
        case 81: return FOR_EXPRESSION;
        case 82: return FOR_UPDATE;
        case 83: return FOR_BODY;
        case 84: return FOR_EACH;
        case 85: return WHILE;
        case 86: return WHILE_CONDITION;
        case 87: return WHILE_BODY;
        case 88: return DO_WHILE;
        case 89: return DO_WHILE_CONDITION;
        case 90: return DO_WHILE_BODY;
        case 91: return BREAK;
        case 92: return CONTINUE;
        case 93: return GOTO;
        case 94: return BLOCK;
        case 95: return BLOCK_SCOPE;
        case 96: return RETURN;
        case 97: return TRY;
        case 98: return TRY_BODY;
        case 99: return TRY_CATCH;
        case 100: return TRY_FINALLY;
        case 101: return THROW;
        case 102: return ASSERT;
        case 103: return CALL;
        case 104: return CALL_RECEIVER;
        case 105: return CALL_CALLEE;
        case 106: return CALL_POSITIONAL_ARGUMENT;
        case 107: return CALL_NAMED_ARGUMENT;
        case 108: return CALL_NAMED_ARGUMENT_NAME;
        case 109: return CALL_NAMED_ARGUMENT_VALUE;
        case 110: return NOOP;
        case 111: return BOOLEAN_LITERAL;
        case 112: return BYTE_LITERAL;
        case 113: return BYTE_STRING_LITERAL;
        case 114: return CHARACTER_LITERAL;
        case 115: return LIST_LITERAL;
        case 116: return MAP_LITERAL;
        case 117: return NULL_LITERAL;
        case 118: return NUMBER_LITERAL;
        case 119: return REGEXP_LITERAL;
        case 120: return SET_LITERAL;
        case 121: return STRING_LITERAL;
        case 122: return TUPLE_LITERAL;
        case 123: return TYPE_LITERAL;
        case 124: return OTHER_LITERAL;
        case 125: return MAP_ENTRY;
        case 126: return MAP_KEY;
        case 127: return MAP_VALUE;
        case 128: return TYPE;
        case 129: return PRIMITIVE_TYPE;
        case 130: return ASSIGNMENT;
        case 131: return ASSIGNMENT_VARIABLE;
        case 132: return ASSIGNMENT_VALUE;
        case 133: return AUGMENTED_ASSIGNMENT;
        case 134: return AUGMENTED_ASSIGNMENT_OPERATOR;
        case 135: return AUGMENTED_ASSIGNMENT_VARIABLE;
        case 136: return AUGMENTED_ASSIGNMENT_VALUE;
        case 137: return THIS;
        case 138: return COMMENT;
        case 139: return DOCUMENTATION;
        case 140: return WHITESPACE;
        case 141: return INCOMPLETE;
        case 142: return UNANNOTATED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Role>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Role> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Role>() {
            public Role findValueByNumber(int number) {
              return Role.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return github.com.bblfsh.sdk.uast.Generated.getDescriptor().getEnumTypes().get(0);
    }

    private static final Role[] VALUES = values();

    public static Role valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Role(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:github.com.bblfsh.sdk.uast.Role)
  }

  public interface NodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:github.com.bblfsh.sdk.uast.Node)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string internal_type = 1;</code>
     */
    java.lang.String getInternalType();
    /**
     * <code>string internal_type = 1;</code>
     */
    com.google.protobuf.ByteString
        getInternalTypeBytes();

    /**
     * <code>map&lt;string, string&gt; properties = 2;</code>
     */
    int getPropertiesCount();
    /**
     * <code>map&lt;string, string&gt; properties = 2;</code>
     */
    boolean containsProperties(
        java.lang.String key);
    /**
     * Use {@link #getPropertiesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getProperties();
    /**
     * <code>map&lt;string, string&gt; properties = 2;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getPropertiesMap();
    /**
     * <code>map&lt;string, string&gt; properties = 2;</code>
     */

    java.lang.String getPropertiesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; properties = 2;</code>
     */

    java.lang.String getPropertiesOrThrow(
        java.lang.String key);

    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
     */
    java.util.List<github.com.bblfsh.sdk.uast.Generated.Node> 
        getChildrenList();
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
     */
    github.com.bblfsh.sdk.uast.Generated.Node getChildren(int index);
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
     */
    int getChildrenCount();
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
     */
    java.util.List<? extends github.com.bblfsh.sdk.uast.Generated.NodeOrBuilder> 
        getChildrenOrBuilderList();
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
     */
    github.com.bblfsh.sdk.uast.Generated.NodeOrBuilder getChildrenOrBuilder(
        int index);

    /**
     * <code>string token = 4;</code>
     */
    java.lang.String getToken();
    /**
     * <code>string token = 4;</code>
     */
    com.google.protobuf.ByteString
        getTokenBytes();

    /**
     * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
     */
    boolean hasStartPosition();
    /**
     * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
     */
    github.com.bblfsh.sdk.uast.Generated.Position getStartPosition();
    /**
     * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
     */
    github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder getStartPositionOrBuilder();

    /**
     * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
     */
    boolean hasEndPosition();
    /**
     * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
     */
    github.com.bblfsh.sdk.uast.Generated.Position getEndPosition();
    /**
     * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
     */
    github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder getEndPositionOrBuilder();

    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
     */
    java.util.List<github.com.bblfsh.sdk.uast.Generated.Role> getRolesList();
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
     */
    int getRolesCount();
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
     */
    github.com.bblfsh.sdk.uast.Generated.Role getRoles(int index);
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
     */
    java.util.List<java.lang.Integer>
    getRolesValueList();
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
     */
    int getRolesValue(int index);
  }
  /**
   * <pre>
   * Node is a node in a UAST.
   * </pre>
   *
   * Protobuf type {@code github.com.bblfsh.sdk.uast.Node}
   */
  public  static final class Node extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:github.com.bblfsh.sdk.uast.Node)
      NodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Node.newBuilder() to construct.
    private Node(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Node() {
      internalType_ = "";
      children_ = java.util.Collections.emptyList();
      token_ = "";
      roles_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Node(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              internalType_ = s;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                properties_ = com.google.protobuf.MapField.newMapField(
                    PropertiesDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              properties__ = input.readMessage(
                  PropertiesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              properties_.getMutableMap().put(
                  properties__.getKey(), properties__.getValue());
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                children_ = new java.util.ArrayList<github.com.bblfsh.sdk.uast.Generated.Node>();
                mutable_bitField0_ |= 0x00000004;
              }
              children_.add(
                  input.readMessage(github.com.bblfsh.sdk.uast.Generated.Node.parser(), extensionRegistry));
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              token_ = s;
              break;
            }
            case 42: {
              github.com.bblfsh.sdk.uast.Generated.Position.Builder subBuilder = null;
              if (startPosition_ != null) {
                subBuilder = startPosition_.toBuilder();
              }
              startPosition_ = input.readMessage(github.com.bblfsh.sdk.uast.Generated.Position.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(startPosition_);
                startPosition_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              github.com.bblfsh.sdk.uast.Generated.Position.Builder subBuilder = null;
              if (endPosition_ != null) {
                subBuilder = endPosition_.toBuilder();
              }
              endPosition_ = input.readMessage(github.com.bblfsh.sdk.uast.Generated.Position.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(endPosition_);
                endPosition_ = subBuilder.buildPartial();
              }

              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                roles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              roles_.add(rawValue);
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                  roles_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000040;
                }
                roles_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          children_ = java.util.Collections.unmodifiableList(children_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          roles_ = java.util.Collections.unmodifiableList(roles_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return github.com.bblfsh.sdk.uast.Generated.internal_static_github_com_bblfsh_sdk_uast_Node_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetProperties();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return github.com.bblfsh.sdk.uast.Generated.internal_static_github_com_bblfsh_sdk_uast_Node_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              github.com.bblfsh.sdk.uast.Generated.Node.class, github.com.bblfsh.sdk.uast.Generated.Node.Builder.class);
    }

    private int bitField0_;
    public static final int INTERNAL_TYPE_FIELD_NUMBER = 1;
    private volatile java.lang.Object internalType_;
    /**
     * <code>string internal_type = 1;</code>
     */
    public java.lang.String getInternalType() {
      java.lang.Object ref = internalType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        internalType_ = s;
        return s;
      }
    }
    /**
     * <code>string internal_type = 1;</code>
     */
    public com.google.protobuf.ByteString
        getInternalTypeBytes() {
      java.lang.Object ref = internalType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        internalType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PROPERTIES_FIELD_NUMBER = 2;
    private static final class PropertiesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  github.com.bblfsh.sdk.uast.Generated.internal_static_github_com_bblfsh_sdk_uast_Node_PropertiesEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> properties_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetProperties() {
      if (properties_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            PropertiesDefaultEntryHolder.defaultEntry);
      }
      return properties_;
    }

    public int getPropertiesCount() {
      return internalGetProperties().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; properties = 2;</code>
     */

    public boolean containsProperties(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetProperties().getMap().containsKey(key);
    }
    /**
     * Use {@link #getPropertiesMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getProperties() {
      return getPropertiesMap();
    }
    /**
     * <code>map&lt;string, string&gt; properties = 2;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getPropertiesMap() {
      return internalGetProperties().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; properties = 2;</code>
     */

    public java.lang.String getPropertiesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetProperties().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; properties = 2;</code>
     */

    public java.lang.String getPropertiesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetProperties().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int CHILDREN_FIELD_NUMBER = 3;
    private java.util.List<github.com.bblfsh.sdk.uast.Generated.Node> children_;
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
     */
    public java.util.List<github.com.bblfsh.sdk.uast.Generated.Node> getChildrenList() {
      return children_;
    }
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
     */
    public java.util.List<? extends github.com.bblfsh.sdk.uast.Generated.NodeOrBuilder> 
        getChildrenOrBuilderList() {
      return children_;
    }
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
     */
    public int getChildrenCount() {
      return children_.size();
    }
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
     */
    public github.com.bblfsh.sdk.uast.Generated.Node getChildren(int index) {
      return children_.get(index);
    }
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
     */
    public github.com.bblfsh.sdk.uast.Generated.NodeOrBuilder getChildrenOrBuilder(
        int index) {
      return children_.get(index);
    }

    public static final int TOKEN_FIELD_NUMBER = 4;
    private volatile java.lang.Object token_;
    /**
     * <code>string token = 4;</code>
     */
    public java.lang.String getToken() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        token_ = s;
        return s;
      }
    }
    /**
     * <code>string token = 4;</code>
     */
    public com.google.protobuf.ByteString
        getTokenBytes() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        token_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int START_POSITION_FIELD_NUMBER = 5;
    private github.com.bblfsh.sdk.uast.Generated.Position startPosition_;
    /**
     * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
     */
    public boolean hasStartPosition() {
      return startPosition_ != null;
    }
    /**
     * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
     */
    public github.com.bblfsh.sdk.uast.Generated.Position getStartPosition() {
      return startPosition_ == null ? github.com.bblfsh.sdk.uast.Generated.Position.getDefaultInstance() : startPosition_;
    }
    /**
     * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
     */
    public github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder getStartPositionOrBuilder() {
      return getStartPosition();
    }

    public static final int END_POSITION_FIELD_NUMBER = 6;
    private github.com.bblfsh.sdk.uast.Generated.Position endPosition_;
    /**
     * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
     */
    public boolean hasEndPosition() {
      return endPosition_ != null;
    }
    /**
     * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
     */
    public github.com.bblfsh.sdk.uast.Generated.Position getEndPosition() {
      return endPosition_ == null ? github.com.bblfsh.sdk.uast.Generated.Position.getDefaultInstance() : endPosition_;
    }
    /**
     * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
     */
    public github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder getEndPositionOrBuilder() {
      return getEndPosition();
    }

    public static final int ROLES_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> roles_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, github.com.bblfsh.sdk.uast.Generated.Role> roles_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, github.com.bblfsh.sdk.uast.Generated.Role>() {
              public github.com.bblfsh.sdk.uast.Generated.Role convert(java.lang.Integer from) {
                github.com.bblfsh.sdk.uast.Generated.Role result = github.com.bblfsh.sdk.uast.Generated.Role.valueOf(from);
                return result == null ? github.com.bblfsh.sdk.uast.Generated.Role.UNRECOGNIZED : result;
              }
            };
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
     */
    public java.util.List<github.com.bblfsh.sdk.uast.Generated.Role> getRolesList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, github.com.bblfsh.sdk.uast.Generated.Role>(roles_, roles_converter_);
    }
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
     */
    public int getRolesCount() {
      return roles_.size();
    }
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
     */
    public github.com.bblfsh.sdk.uast.Generated.Role getRoles(int index) {
      return roles_converter_.convert(roles_.get(index));
    }
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
     */
    public java.util.List<java.lang.Integer>
    getRolesValueList() {
      return roles_;
    }
    /**
     * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
     */
    public int getRolesValue(int index) {
      return roles_.get(index);
    }
    private int rolesMemoizedSerializedSize;

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (!getInternalTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, internalType_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetProperties(),
          PropertiesDefaultEntryHolder.defaultEntry,
          2);
      for (int i = 0; i < children_.size(); i++) {
        output.writeMessage(3, children_.get(i));
      }
      if (!getTokenBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, token_);
      }
      if (startPosition_ != null) {
        output.writeMessage(5, getStartPosition());
      }
      if (endPosition_ != null) {
        output.writeMessage(6, getEndPosition());
      }
      if (getRolesList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(rolesMemoizedSerializedSize);
      }
      for (int i = 0; i < roles_.size(); i++) {
        output.writeEnumNoTag(roles_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getInternalTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, internalType_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetProperties().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        properties__ = PropertiesDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, properties__);
      }
      for (int i = 0; i < children_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, children_.get(i));
      }
      if (!getTokenBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, token_);
      }
      if (startPosition_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getStartPosition());
      }
      if (endPosition_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getEndPosition());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roles_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(roles_.get(i));
        }
        size += dataSize;
        if (!getRolesList().isEmpty()) {  size += 1;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }rolesMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof github.com.bblfsh.sdk.uast.Generated.Node)) {
        return super.equals(obj);
      }
      github.com.bblfsh.sdk.uast.Generated.Node other = (github.com.bblfsh.sdk.uast.Generated.Node) obj;

      boolean result = true;
      result = result && getInternalType()
          .equals(other.getInternalType());
      result = result && internalGetProperties().equals(
          other.internalGetProperties());
      result = result && getChildrenList()
          .equals(other.getChildrenList());
      result = result && getToken()
          .equals(other.getToken());
      result = result && (hasStartPosition() == other.hasStartPosition());
      if (hasStartPosition()) {
        result = result && getStartPosition()
            .equals(other.getStartPosition());
      }
      result = result && (hasEndPosition() == other.hasEndPosition());
      if (hasEndPosition()) {
        result = result && getEndPosition()
            .equals(other.getEndPosition());
      }
      result = result && roles_.equals(other.roles_);
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INTERNAL_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getInternalType().hashCode();
      if (!internalGetProperties().getMap().isEmpty()) {
        hash = (37 * hash) + PROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetProperties().hashCode();
      }
      if (getChildrenCount() > 0) {
        hash = (37 * hash) + CHILDREN_FIELD_NUMBER;
        hash = (53 * hash) + getChildrenList().hashCode();
      }
      hash = (37 * hash) + TOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getToken().hashCode();
      if (hasStartPosition()) {
        hash = (37 * hash) + START_POSITION_FIELD_NUMBER;
        hash = (53 * hash) + getStartPosition().hashCode();
      }
      if (hasEndPosition()) {
        hash = (37 * hash) + END_POSITION_FIELD_NUMBER;
        hash = (53 * hash) + getEndPosition().hashCode();
      }
      if (getRolesCount() > 0) {
        hash = (37 * hash) + ROLES_FIELD_NUMBER;
        hash = (53 * hash) + roles_.hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static github.com.bblfsh.sdk.uast.Generated.Node parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Node parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Node parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Node parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Node parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Node parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Node parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Node parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Node parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Node parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Node parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Node parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(github.com.bblfsh.sdk.uast.Generated.Node prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node is a node in a UAST.
     * </pre>
     *
     * Protobuf type {@code github.com.bblfsh.sdk.uast.Node}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:github.com.bblfsh.sdk.uast.Node)
        github.com.bblfsh.sdk.uast.Generated.NodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return github.com.bblfsh.sdk.uast.Generated.internal_static_github_com_bblfsh_sdk_uast_Node_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetProperties();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMutableProperties();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return github.com.bblfsh.sdk.uast.Generated.internal_static_github_com_bblfsh_sdk_uast_Node_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                github.com.bblfsh.sdk.uast.Generated.Node.class, github.com.bblfsh.sdk.uast.Generated.Node.Builder.class);
      }

      // Construct using github.com.bblfsh.sdk.uast.Generated.Node.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getChildrenFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        internalType_ = "";

        internalGetMutableProperties().clear();
        if (childrenBuilder_ == null) {
          children_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          childrenBuilder_.clear();
        }
        token_ = "";

        if (startPositionBuilder_ == null) {
          startPosition_ = null;
        } else {
          startPosition_ = null;
          startPositionBuilder_ = null;
        }
        if (endPositionBuilder_ == null) {
          endPosition_ = null;
        } else {
          endPosition_ = null;
          endPositionBuilder_ = null;
        }
        roles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return github.com.bblfsh.sdk.uast.Generated.internal_static_github_com_bblfsh_sdk_uast_Node_descriptor;
      }

      public github.com.bblfsh.sdk.uast.Generated.Node getDefaultInstanceForType() {
        return github.com.bblfsh.sdk.uast.Generated.Node.getDefaultInstance();
      }

      public github.com.bblfsh.sdk.uast.Generated.Node build() {
        github.com.bblfsh.sdk.uast.Generated.Node result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public github.com.bblfsh.sdk.uast.Generated.Node buildPartial() {
        github.com.bblfsh.sdk.uast.Generated.Node result = new github.com.bblfsh.sdk.uast.Generated.Node(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.internalType_ = internalType_;
        result.properties_ = internalGetProperties();
        result.properties_.makeImmutable();
        if (childrenBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            children_ = java.util.Collections.unmodifiableList(children_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.children_ = children_;
        } else {
          result.children_ = childrenBuilder_.build();
        }
        result.token_ = token_;
        if (startPositionBuilder_ == null) {
          result.startPosition_ = startPosition_;
        } else {
          result.startPosition_ = startPositionBuilder_.build();
        }
        if (endPositionBuilder_ == null) {
          result.endPosition_ = endPosition_;
        } else {
          result.endPosition_ = endPositionBuilder_.build();
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          roles_ = java.util.Collections.unmodifiableList(roles_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.roles_ = roles_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof github.com.bblfsh.sdk.uast.Generated.Node) {
          return mergeFrom((github.com.bblfsh.sdk.uast.Generated.Node)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(github.com.bblfsh.sdk.uast.Generated.Node other) {
        if (other == github.com.bblfsh.sdk.uast.Generated.Node.getDefaultInstance()) return this;
        if (!other.getInternalType().isEmpty()) {
          internalType_ = other.internalType_;
          onChanged();
        }
        internalGetMutableProperties().mergeFrom(
            other.internalGetProperties());
        if (childrenBuilder_ == null) {
          if (!other.children_.isEmpty()) {
            if (children_.isEmpty()) {
              children_ = other.children_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureChildrenIsMutable();
              children_.addAll(other.children_);
            }
            onChanged();
          }
        } else {
          if (!other.children_.isEmpty()) {
            if (childrenBuilder_.isEmpty()) {
              childrenBuilder_.dispose();
              childrenBuilder_ = null;
              children_ = other.children_;
              bitField0_ = (bitField0_ & ~0x00000004);
              childrenBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getChildrenFieldBuilder() : null;
            } else {
              childrenBuilder_.addAllMessages(other.children_);
            }
          }
        }
        if (!other.getToken().isEmpty()) {
          token_ = other.token_;
          onChanged();
        }
        if (other.hasStartPosition()) {
          mergeStartPosition(other.getStartPosition());
        }
        if (other.hasEndPosition()) {
          mergeEndPosition(other.getEndPosition());
        }
        if (!other.roles_.isEmpty()) {
          if (roles_.isEmpty()) {
            roles_ = other.roles_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureRolesIsMutable();
            roles_.addAll(other.roles_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        github.com.bblfsh.sdk.uast.Generated.Node parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (github.com.bblfsh.sdk.uast.Generated.Node) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object internalType_ = "";
      /**
       * <code>string internal_type = 1;</code>
       */
      public java.lang.String getInternalType() {
        java.lang.Object ref = internalType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          internalType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string internal_type = 1;</code>
       */
      public com.google.protobuf.ByteString
          getInternalTypeBytes() {
        java.lang.Object ref = internalType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          internalType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string internal_type = 1;</code>
       */
      public Builder setInternalType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        internalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string internal_type = 1;</code>
       */
      public Builder clearInternalType() {
        
        internalType_ = getDefaultInstance().getInternalType();
        onChanged();
        return this;
      }
      /**
       * <code>string internal_type = 1;</code>
       */
      public Builder setInternalTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        internalType_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> properties_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetProperties() {
        if (properties_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              PropertiesDefaultEntryHolder.defaultEntry);
        }
        return properties_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableProperties() {
        onChanged();;
        if (properties_ == null) {
          properties_ = com.google.protobuf.MapField.newMapField(
              PropertiesDefaultEntryHolder.defaultEntry);
        }
        if (!properties_.isMutable()) {
          properties_ = properties_.copy();
        }
        return properties_;
      }

      public int getPropertiesCount() {
        return internalGetProperties().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; properties = 2;</code>
       */

      public boolean containsProperties(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetProperties().getMap().containsKey(key);
      }
      /**
       * Use {@link #getPropertiesMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getProperties() {
        return getPropertiesMap();
      }
      /**
       * <code>map&lt;string, string&gt; properties = 2;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getPropertiesMap() {
        return internalGetProperties().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; properties = 2;</code>
       */

      public java.lang.String getPropertiesOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetProperties().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; properties = 2;</code>
       */

      public java.lang.String getPropertiesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetProperties().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearProperties() {
        internalGetMutableProperties().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; properties = 2;</code>
       */

      public Builder removeProperties(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableProperties().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableProperties() {
        return internalGetMutableProperties().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; properties = 2;</code>
       */
      public Builder putProperties(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableProperties().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; properties = 2;</code>
       */

      public Builder putAllProperties(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableProperties().getMutableMap()
            .putAll(values);
        return this;
      }

      private java.util.List<github.com.bblfsh.sdk.uast.Generated.Node> children_ =
        java.util.Collections.emptyList();
      private void ensureChildrenIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          children_ = new java.util.ArrayList<github.com.bblfsh.sdk.uast.Generated.Node>(children_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          github.com.bblfsh.sdk.uast.Generated.Node, github.com.bblfsh.sdk.uast.Generated.Node.Builder, github.com.bblfsh.sdk.uast.Generated.NodeOrBuilder> childrenBuilder_;

      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public java.util.List<github.com.bblfsh.sdk.uast.Generated.Node> getChildrenList() {
        if (childrenBuilder_ == null) {
          return java.util.Collections.unmodifiableList(children_);
        } else {
          return childrenBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public int getChildrenCount() {
        if (childrenBuilder_ == null) {
          return children_.size();
        } else {
          return childrenBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.Node getChildren(int index) {
        if (childrenBuilder_ == null) {
          return children_.get(index);
        } else {
          return childrenBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public Builder setChildren(
          int index, github.com.bblfsh.sdk.uast.Generated.Node value) {
        if (childrenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChildrenIsMutable();
          children_.set(index, value);
          onChanged();
        } else {
          childrenBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public Builder setChildren(
          int index, github.com.bblfsh.sdk.uast.Generated.Node.Builder builderForValue) {
        if (childrenBuilder_ == null) {
          ensureChildrenIsMutable();
          children_.set(index, builderForValue.build());
          onChanged();
        } else {
          childrenBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public Builder addChildren(github.com.bblfsh.sdk.uast.Generated.Node value) {
        if (childrenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChildrenIsMutable();
          children_.add(value);
          onChanged();
        } else {
          childrenBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public Builder addChildren(
          int index, github.com.bblfsh.sdk.uast.Generated.Node value) {
        if (childrenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChildrenIsMutable();
          children_.add(index, value);
          onChanged();
        } else {
          childrenBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public Builder addChildren(
          github.com.bblfsh.sdk.uast.Generated.Node.Builder builderForValue) {
        if (childrenBuilder_ == null) {
          ensureChildrenIsMutable();
          children_.add(builderForValue.build());
          onChanged();
        } else {
          childrenBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public Builder addChildren(
          int index, github.com.bblfsh.sdk.uast.Generated.Node.Builder builderForValue) {
        if (childrenBuilder_ == null) {
          ensureChildrenIsMutable();
          children_.add(index, builderForValue.build());
          onChanged();
        } else {
          childrenBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public Builder addAllChildren(
          java.lang.Iterable<? extends github.com.bblfsh.sdk.uast.Generated.Node> values) {
        if (childrenBuilder_ == null) {
          ensureChildrenIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, children_);
          onChanged();
        } else {
          childrenBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public Builder clearChildren() {
        if (childrenBuilder_ == null) {
          children_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          childrenBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public Builder removeChildren(int index) {
        if (childrenBuilder_ == null) {
          ensureChildrenIsMutable();
          children_.remove(index);
          onChanged();
        } else {
          childrenBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.Node.Builder getChildrenBuilder(
          int index) {
        return getChildrenFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.NodeOrBuilder getChildrenOrBuilder(
          int index) {
        if (childrenBuilder_ == null) {
          return children_.get(index);  } else {
          return childrenBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public java.util.List<? extends github.com.bblfsh.sdk.uast.Generated.NodeOrBuilder> 
           getChildrenOrBuilderList() {
        if (childrenBuilder_ != null) {
          return childrenBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(children_);
        }
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.Node.Builder addChildrenBuilder() {
        return getChildrenFieldBuilder().addBuilder(
            github.com.bblfsh.sdk.uast.Generated.Node.getDefaultInstance());
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.Node.Builder addChildrenBuilder(
          int index) {
        return getChildrenFieldBuilder().addBuilder(
            index, github.com.bblfsh.sdk.uast.Generated.Node.getDefaultInstance());
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Node children = 3;</code>
       */
      public java.util.List<github.com.bblfsh.sdk.uast.Generated.Node.Builder> 
           getChildrenBuilderList() {
        return getChildrenFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          github.com.bblfsh.sdk.uast.Generated.Node, github.com.bblfsh.sdk.uast.Generated.Node.Builder, github.com.bblfsh.sdk.uast.Generated.NodeOrBuilder> 
          getChildrenFieldBuilder() {
        if (childrenBuilder_ == null) {
          childrenBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              github.com.bblfsh.sdk.uast.Generated.Node, github.com.bblfsh.sdk.uast.Generated.Node.Builder, github.com.bblfsh.sdk.uast.Generated.NodeOrBuilder>(
                  children_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          children_ = null;
        }
        return childrenBuilder_;
      }

      private java.lang.Object token_ = "";
      /**
       * <code>string token = 4;</code>
       */
      public java.lang.String getToken() {
        java.lang.Object ref = token_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          token_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string token = 4;</code>
       */
      public com.google.protobuf.ByteString
          getTokenBytes() {
        java.lang.Object ref = token_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          token_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string token = 4;</code>
       */
      public Builder setToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        token_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string token = 4;</code>
       */
      public Builder clearToken() {
        
        token_ = getDefaultInstance().getToken();
        onChanged();
        return this;
      }
      /**
       * <code>string token = 4;</code>
       */
      public Builder setTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        token_ = value;
        onChanged();
        return this;
      }

      private github.com.bblfsh.sdk.uast.Generated.Position startPosition_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          github.com.bblfsh.sdk.uast.Generated.Position, github.com.bblfsh.sdk.uast.Generated.Position.Builder, github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder> startPositionBuilder_;
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
       */
      public boolean hasStartPosition() {
        return startPositionBuilder_ != null || startPosition_ != null;
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.Position getStartPosition() {
        if (startPositionBuilder_ == null) {
          return startPosition_ == null ? github.com.bblfsh.sdk.uast.Generated.Position.getDefaultInstance() : startPosition_;
        } else {
          return startPositionBuilder_.getMessage();
        }
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
       */
      public Builder setStartPosition(github.com.bblfsh.sdk.uast.Generated.Position value) {
        if (startPositionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          startPosition_ = value;
          onChanged();
        } else {
          startPositionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
       */
      public Builder setStartPosition(
          github.com.bblfsh.sdk.uast.Generated.Position.Builder builderForValue) {
        if (startPositionBuilder_ == null) {
          startPosition_ = builderForValue.build();
          onChanged();
        } else {
          startPositionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
       */
      public Builder mergeStartPosition(github.com.bblfsh.sdk.uast.Generated.Position value) {
        if (startPositionBuilder_ == null) {
          if (startPosition_ != null) {
            startPosition_ =
              github.com.bblfsh.sdk.uast.Generated.Position.newBuilder(startPosition_).mergeFrom(value).buildPartial();
          } else {
            startPosition_ = value;
          }
          onChanged();
        } else {
          startPositionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
       */
      public Builder clearStartPosition() {
        if (startPositionBuilder_ == null) {
          startPosition_ = null;
          onChanged();
        } else {
          startPosition_ = null;
          startPositionBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.Position.Builder getStartPositionBuilder() {
        
        onChanged();
        return getStartPositionFieldBuilder().getBuilder();
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder getStartPositionOrBuilder() {
        if (startPositionBuilder_ != null) {
          return startPositionBuilder_.getMessageOrBuilder();
        } else {
          return startPosition_ == null ?
              github.com.bblfsh.sdk.uast.Generated.Position.getDefaultInstance() : startPosition_;
        }
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position start_position = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          github.com.bblfsh.sdk.uast.Generated.Position, github.com.bblfsh.sdk.uast.Generated.Position.Builder, github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder> 
          getStartPositionFieldBuilder() {
        if (startPositionBuilder_ == null) {
          startPositionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              github.com.bblfsh.sdk.uast.Generated.Position, github.com.bblfsh.sdk.uast.Generated.Position.Builder, github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder>(
                  getStartPosition(),
                  getParentForChildren(),
                  isClean());
          startPosition_ = null;
        }
        return startPositionBuilder_;
      }

      private github.com.bblfsh.sdk.uast.Generated.Position endPosition_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          github.com.bblfsh.sdk.uast.Generated.Position, github.com.bblfsh.sdk.uast.Generated.Position.Builder, github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder> endPositionBuilder_;
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
       */
      public boolean hasEndPosition() {
        return endPositionBuilder_ != null || endPosition_ != null;
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.Position getEndPosition() {
        if (endPositionBuilder_ == null) {
          return endPosition_ == null ? github.com.bblfsh.sdk.uast.Generated.Position.getDefaultInstance() : endPosition_;
        } else {
          return endPositionBuilder_.getMessage();
        }
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
       */
      public Builder setEndPosition(github.com.bblfsh.sdk.uast.Generated.Position value) {
        if (endPositionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          endPosition_ = value;
          onChanged();
        } else {
          endPositionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
       */
      public Builder setEndPosition(
          github.com.bblfsh.sdk.uast.Generated.Position.Builder builderForValue) {
        if (endPositionBuilder_ == null) {
          endPosition_ = builderForValue.build();
          onChanged();
        } else {
          endPositionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
       */
      public Builder mergeEndPosition(github.com.bblfsh.sdk.uast.Generated.Position value) {
        if (endPositionBuilder_ == null) {
          if (endPosition_ != null) {
            endPosition_ =
              github.com.bblfsh.sdk.uast.Generated.Position.newBuilder(endPosition_).mergeFrom(value).buildPartial();
          } else {
            endPosition_ = value;
          }
          onChanged();
        } else {
          endPositionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
       */
      public Builder clearEndPosition() {
        if (endPositionBuilder_ == null) {
          endPosition_ = null;
          onChanged();
        } else {
          endPosition_ = null;
          endPositionBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.Position.Builder getEndPositionBuilder() {
        
        onChanged();
        return getEndPositionFieldBuilder().getBuilder();
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder getEndPositionOrBuilder() {
        if (endPositionBuilder_ != null) {
          return endPositionBuilder_.getMessageOrBuilder();
        } else {
          return endPosition_ == null ?
              github.com.bblfsh.sdk.uast.Generated.Position.getDefaultInstance() : endPosition_;
        }
      }
      /**
       * <code>.github.com.bblfsh.sdk.uast.Position end_position = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          github.com.bblfsh.sdk.uast.Generated.Position, github.com.bblfsh.sdk.uast.Generated.Position.Builder, github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder> 
          getEndPositionFieldBuilder() {
        if (endPositionBuilder_ == null) {
          endPositionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              github.com.bblfsh.sdk.uast.Generated.Position, github.com.bblfsh.sdk.uast.Generated.Position.Builder, github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder>(
                  getEndPosition(),
                  getParentForChildren(),
                  isClean());
          endPosition_ = null;
        }
        return endPositionBuilder_;
      }

      private java.util.List<java.lang.Integer> roles_ =
        java.util.Collections.emptyList();
      private void ensureRolesIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          roles_ = new java.util.ArrayList<java.lang.Integer>(roles_);
          bitField0_ |= 0x00000040;
        }
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public java.util.List<github.com.bblfsh.sdk.uast.Generated.Role> getRolesList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, github.com.bblfsh.sdk.uast.Generated.Role>(roles_, roles_converter_);
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public int getRolesCount() {
        return roles_.size();
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public github.com.bblfsh.sdk.uast.Generated.Role getRoles(int index) {
        return roles_converter_.convert(roles_.get(index));
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public Builder setRoles(
          int index, github.com.bblfsh.sdk.uast.Generated.Role value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRolesIsMutable();
        roles_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public Builder addRoles(github.com.bblfsh.sdk.uast.Generated.Role value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRolesIsMutable();
        roles_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public Builder addAllRoles(
          java.lang.Iterable<? extends github.com.bblfsh.sdk.uast.Generated.Role> values) {
        ensureRolesIsMutable();
        for (github.com.bblfsh.sdk.uast.Generated.Role value : values) {
          roles_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public Builder clearRoles() {
        roles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public java.util.List<java.lang.Integer>
      getRolesValueList() {
        return java.util.Collections.unmodifiableList(roles_);
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public int getRolesValue(int index) {
        return roles_.get(index);
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public Builder setRolesValue(
          int index, int value) {
        ensureRolesIsMutable();
        roles_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public Builder addRolesValue(int value) {
        ensureRolesIsMutable();
        roles_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .github.com.bblfsh.sdk.uast.Role roles = 7;</code>
       */
      public Builder addAllRolesValue(
          java.lang.Iterable<java.lang.Integer> values) {
        ensureRolesIsMutable();
        for (int value : values) {
          roles_.add(value);
        }
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:github.com.bblfsh.sdk.uast.Node)
    }

    // @@protoc_insertion_point(class_scope:github.com.bblfsh.sdk.uast.Node)
    private static final github.com.bblfsh.sdk.uast.Generated.Node DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new github.com.bblfsh.sdk.uast.Generated.Node();
    }

    public static github.com.bblfsh.sdk.uast.Generated.Node getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Node>
        PARSER = new com.google.protobuf.AbstractParser<Node>() {
      public Node parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Node(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Node> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Node> getParserForType() {
      return PARSER;
    }

    public github.com.bblfsh.sdk.uast.Generated.Node getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PositionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:github.com.bblfsh.sdk.uast.Position)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint32 offset = 1;</code>
     */
    int getOffset();

    /**
     * <code>uint32 line = 2;</code>
     */
    int getLine();

    /**
     * <code>uint32 col = 3;</code>
     */
    int getCol();
  }
  /**
   * <pre>
   * Position represents a position in a source code file.
   * </pre>
   *
   * Protobuf type {@code github.com.bblfsh.sdk.uast.Position}
   */
  public  static final class Position extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:github.com.bblfsh.sdk.uast.Position)
      PositionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Position.newBuilder() to construct.
    private Position(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Position() {
      offset_ = 0;
      line_ = 0;
      col_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Position(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              offset_ = input.readUInt32();
              break;
            }
            case 16: {

              line_ = input.readUInt32();
              break;
            }
            case 24: {

              col_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return github.com.bblfsh.sdk.uast.Generated.internal_static_github_com_bblfsh_sdk_uast_Position_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return github.com.bblfsh.sdk.uast.Generated.internal_static_github_com_bblfsh_sdk_uast_Position_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              github.com.bblfsh.sdk.uast.Generated.Position.class, github.com.bblfsh.sdk.uast.Generated.Position.Builder.class);
    }

    public static final int OFFSET_FIELD_NUMBER = 1;
    private int offset_;
    /**
     * <code>uint32 offset = 1;</code>
     */
    public int getOffset() {
      return offset_;
    }

    public static final int LINE_FIELD_NUMBER = 2;
    private int line_;
    /**
     * <code>uint32 line = 2;</code>
     */
    public int getLine() {
      return line_;
    }

    public static final int COL_FIELD_NUMBER = 3;
    private int col_;
    /**
     * <code>uint32 col = 3;</code>
     */
    public int getCol() {
      return col_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (offset_ != 0) {
        output.writeUInt32(1, offset_);
      }
      if (line_ != 0) {
        output.writeUInt32(2, line_);
      }
      if (col_ != 0) {
        output.writeUInt32(3, col_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (offset_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, offset_);
      }
      if (line_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, line_);
      }
      if (col_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, col_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof github.com.bblfsh.sdk.uast.Generated.Position)) {
        return super.equals(obj);
      }
      github.com.bblfsh.sdk.uast.Generated.Position other = (github.com.bblfsh.sdk.uast.Generated.Position) obj;

      boolean result = true;
      result = result && (getOffset()
          == other.getOffset());
      result = result && (getLine()
          == other.getLine());
      result = result && (getCol()
          == other.getCol());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OFFSET_FIELD_NUMBER;
      hash = (53 * hash) + getOffset();
      hash = (37 * hash) + LINE_FIELD_NUMBER;
      hash = (53 * hash) + getLine();
      hash = (37 * hash) + COL_FIELD_NUMBER;
      hash = (53 * hash) + getCol();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static github.com.bblfsh.sdk.uast.Generated.Position parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Position parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Position parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Position parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Position parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Position parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Position parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Position parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Position parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Position parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Position parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static github.com.bblfsh.sdk.uast.Generated.Position parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(github.com.bblfsh.sdk.uast.Generated.Position prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Position represents a position in a source code file.
     * </pre>
     *
     * Protobuf type {@code github.com.bblfsh.sdk.uast.Position}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:github.com.bblfsh.sdk.uast.Position)
        github.com.bblfsh.sdk.uast.Generated.PositionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return github.com.bblfsh.sdk.uast.Generated.internal_static_github_com_bblfsh_sdk_uast_Position_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return github.com.bblfsh.sdk.uast.Generated.internal_static_github_com_bblfsh_sdk_uast_Position_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                github.com.bblfsh.sdk.uast.Generated.Position.class, github.com.bblfsh.sdk.uast.Generated.Position.Builder.class);
      }

      // Construct using github.com.bblfsh.sdk.uast.Generated.Position.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        offset_ = 0;

        line_ = 0;

        col_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return github.com.bblfsh.sdk.uast.Generated.internal_static_github_com_bblfsh_sdk_uast_Position_descriptor;
      }

      public github.com.bblfsh.sdk.uast.Generated.Position getDefaultInstanceForType() {
        return github.com.bblfsh.sdk.uast.Generated.Position.getDefaultInstance();
      }

      public github.com.bblfsh.sdk.uast.Generated.Position build() {
        github.com.bblfsh.sdk.uast.Generated.Position result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public github.com.bblfsh.sdk.uast.Generated.Position buildPartial() {
        github.com.bblfsh.sdk.uast.Generated.Position result = new github.com.bblfsh.sdk.uast.Generated.Position(this);
        result.offset_ = offset_;
        result.line_ = line_;
        result.col_ = col_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof github.com.bblfsh.sdk.uast.Generated.Position) {
          return mergeFrom((github.com.bblfsh.sdk.uast.Generated.Position)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(github.com.bblfsh.sdk.uast.Generated.Position other) {
        if (other == github.com.bblfsh.sdk.uast.Generated.Position.getDefaultInstance()) return this;
        if (other.getOffset() != 0) {
          setOffset(other.getOffset());
        }
        if (other.getLine() != 0) {
          setLine(other.getLine());
        }
        if (other.getCol() != 0) {
          setCol(other.getCol());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        github.com.bblfsh.sdk.uast.Generated.Position parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (github.com.bblfsh.sdk.uast.Generated.Position) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int offset_ ;
      /**
       * <code>uint32 offset = 1;</code>
       */
      public int getOffset() {
        return offset_;
      }
      /**
       * <code>uint32 offset = 1;</code>
       */
      public Builder setOffset(int value) {
        
        offset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 offset = 1;</code>
       */
      public Builder clearOffset() {
        
        offset_ = 0;
        onChanged();
        return this;
      }

      private int line_ ;
      /**
       * <code>uint32 line = 2;</code>
       */
      public int getLine() {
        return line_;
      }
      /**
       * <code>uint32 line = 2;</code>
       */
      public Builder setLine(int value) {
        
        line_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 line = 2;</code>
       */
      public Builder clearLine() {
        
        line_ = 0;
        onChanged();
        return this;
      }

      private int col_ ;
      /**
       * <code>uint32 col = 3;</code>
       */
      public int getCol() {
        return col_;
      }
      /**
       * <code>uint32 col = 3;</code>
       */
      public Builder setCol(int value) {
        
        col_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 col = 3;</code>
       */
      public Builder clearCol() {
        
        col_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:github.com.bblfsh.sdk.uast.Position)
    }

    // @@protoc_insertion_point(class_scope:github.com.bblfsh.sdk.uast.Position)
    private static final github.com.bblfsh.sdk.uast.Generated.Position DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new github.com.bblfsh.sdk.uast.Generated.Position();
    }

    public static github.com.bblfsh.sdk.uast.Generated.Position getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Position>
        PARSER = new com.google.protobuf.AbstractParser<Position>() {
      public Position parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Position(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Position> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Position> getParserForType() {
      return PARSER;
    }

    public github.com.bblfsh.sdk.uast.Generated.Position getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_github_com_bblfsh_sdk_uast_Node_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_github_com_bblfsh_sdk_uast_Node_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_github_com_bblfsh_sdk_uast_Node_PropertiesEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_github_com_bblfsh_sdk_uast_Node_PropertiesEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_github_com_bblfsh_sdk_uast_Position_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_github_com_bblfsh_sdk_uast_Position_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n*github.com/bblfsh/sdk/uast/generated.p" +
      "roto\022\032github.com.bblfsh.sdk.uast\032-github" +
      ".com/gogo/protobuf/gogoproto/gogo.proto\"" +
      "\222\003\n\004Node\022\025\n\rinternal_type\030\001 \001(\t\022D\n\nprope" +
      "rties\030\002 \003(\01320.github.com.bblfsh.sdk.uast" +
      ".Node.PropertiesEntry\0222\n\010children\030\003 \003(\0132" +
      " .github.com.bblfsh.sdk.uast.Node\022\r\n\005tok" +
      "en\030\004 \001(\t\022<\n\016start_position\030\005 \001(\0132$.githu" +
      "b.com.bblfsh.sdk.uast.Position\022:\n\014end_po" +
      "sition\030\006 \001(\0132$.github.com.bblfsh.sdk.uas",
      "t.Position\022/\n\005roles\030\007 \003(\0162 .github.com.b" +
      "blfsh.sdk.uast.Role\0321\n\017PropertiesEntry\022\013" +
      "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001:\014\210\240\037\000\230\240\037\000" +
      "\360\241\037\000\"?\n\010Position\022\016\n\006offset\030\001 \001(\r\022\014\n\004line" +
      "\030\002 \001(\r\022\013\n\003col\030\003 \001(\r:\010\210\240\037\000\360\241\037\000*\223,\n\004Role\022\030" +
      "\n\007INVALID\020\000\032\013\212\235 \007Invalid\022+\n\021SIMPLE_IDENT" +
      "IFIER\020\001\032\024\212\235 \020SimpleIdentifier\0221\n\024QUALIFI" +
      "ED_IDENTIFIER\020\002\032\027\212\235 \023QualifiedIdentifier" +
      "\022+\n\021BINARY_EXPRESSION\020\003\032\024\212\235 \020BinaryExpre" +
      "ssion\0224\n\026BINARY_EXPRESSION_LEFT\020\004\032\030\212\235 \024B",
      "inaryExpressionLeft\0226\n\027BINARY_EXPRESSION" +
      "_RIGHT\020\005\032\031\212\235 \025BinaryExpressionRight\0220\n\024B" +
      "INARY_EXPRESSION_OP\020\006\032\026\212\235 \022BinaryExpress" +
      "ionOp\022\024\n\005INFIX\020\007\032\t\212\235 \005Infix\022\030\n\007POSTFIX\020\010" +
      "\032\013\212\235 \007Postfix\0221\n\025OP_BITWISE_LEFT_SHIFT\020\t" +
      "\032\026\212\235 \022OpBitwiseLeftShift\0223\n\026OP_BITWISE_R" +
      "IGHT_SHIFT\020\n\032\027\212\235 \023OpBitwiseRightShift\022D\n" +
      "\037OP_BITWISE_UNSIGNED_RIGHT_SHIFT\020\013\032\037\212\235 \033" +
      "OpBitwiseUnsignedRightShift\022\"\n\rOP_BITWIS" +
      "E_OR\020\014\032\017\212\235 \013OpBitwiseOr\022$\n\016OP_BITWISE_XO",
      "R\020\r\032\020\212\235 \014OpBitwiseXor\022$\n\016OP_BITWISE_AND\020" +
      "\016\032\020\212\235 \014OpBitwiseAnd\022\036\n\nEXPRESSION\020\017\032\016\212\235 " +
      "\nExpression\022\034\n\tSTATEMENT\020\020\032\r\212\235 \tStatemen" +
      "t\022\031\n\010OP_EQUAL\020\021\032\013\212\235 \007OpEqual\022 \n\014OP_NOT_E" +
      "QUAL\020\022\032\016\212\235 \nOpNotEqual\022 \n\014OP_LESS_THAN\020\023" +
      "\032\016\212\235 \nOpLessThan\022+\n\022OP_LESS_THAN_EQUAL\020\024" +
      "\032\023\212\235 \017OpLessThanEqual\022&\n\017OP_GREATER_THAN" +
      "\020\025\032\021\212\235 \rOpGreaterThan\0221\n\025OP_GREATER_THAN" +
      "_EQUAL\020\026\032\026\212\235 \022OpGreaterThanEqual\022\027\n\007OP_S" +
      "AME\020\027\032\n\212\235 \006OpSame\022\036\n\013OP_NOT_SAME\020\030\032\r\212\235 \t",
      "OpNotSame\022\037\n\013OP_CONTAINS\020\031\032\016\212\235 \nOpContai" +
      "ns\022&\n\017OP_NOT_CONTAINS\020\032\032\021\212\235 \rOpNotContai" +
      "ns\022(\n\020OP_PRE_INCREMENT\020\033\032\022\212\235 \016OpPreIncre" +
      "ment\022*\n\021OP_POST_INCREMENT\020\034\032\023\212\235 \017OpPostI" +
      "ncrement\022(\n\020OP_PRE_DECREMENT\020\035\032\022\212\235 \016OpPr" +
      "eDecrement\022*\n\021OP_POST_DECREMENT\020\036\032\023\212\235 \017O" +
      "pPostDecrement\022\037\n\013OP_NEGATIVE\020\037\032\016\212\235 \nOpN" +
      "egative\022\037\n\013OP_POSITIVE\020 \032\016\212\235 \nOpPositive" +
      "\0222\n\025OP_BITWISE_COMPLEMENT\020!\032\027\212\235 \023OpBitwi" +
      "seComplement\022%\n\016OP_DEREFERENCE\020\"\032\021\212\235 \rOp",
      "Dereference\022&\n\017OP_TAKE_ADDRESS\020#\032\021\212\235 \rOp" +
      "TakeAddress\022\022\n\004FILE\020$\032\010\212\235 \004File\022$\n\016OP_BO" +
      "OLEAN_AND\020%\032\020\212\235 \014OpBooleanAnd\022\"\n\rOP_BOOL" +
      "EAN_OR\020&\032\017\212\235 \013OpBooleanOr\022$\n\016OP_BOOLEAN_" +
      "NOT\020\'\032\020\212\235 \014OpBooleanNot\022$\n\016OP_BOOLEAN_XO" +
      "R\020(\032\020\212\235 \014OpBooleanXor\022\025\n\006OP_ADD\020)\032\t\212\235 \005O" +
      "pAdd\022!\n\014OP_SUBSTRACT\020*\032\017\212\235 \013OpSubstract\022" +
      "\037\n\013OP_MULTIPLY\020+\032\016\212\235 \nOpMultiply\022\033\n\tOP_D" +
      "IVIDE\020,\032\014\212\235 \010OpDivide\022\025\n\006OP_MOD\020-\032\t\212\235 \005O" +
      "pMod\022/\n\023PACKAGE_DECLARATION\020.\032\026\212\235 \022Packa",
      "geDeclaration\022-\n\022IMPORT_DECLARATION\020/\032\025\212" +
      "\235 \021ImportDeclaration\022\037\n\013IMPORT_PATH\0200\032\016\212" +
      "\235 \nImportPath\022!\n\014IMPORT_ALIAS\0201\032\017\212\235 \013Imp" +
      "ortAlias\0221\n\024FUNCTION_DECLARATION\0202\032\027\212\235 \023" +
      "FunctionDeclaration\022:\n\031FUNCTION_DECLARAT" +
      "ION_BODY\0203\032\033\212\235 \027FunctionDeclarationBody\022" +
      ":\n\031FUNCTION_DECLARATION_NAME\0204\032\033\212\235 \027Func" +
      "tionDeclarationName\022B\n\035FUNCTION_DECLARAT" +
      "ION_RECEIVER\0205\032\037\212\235 \033FunctionDeclarationR" +
      "eceiver\022B\n\035FUNCTION_DECLARATION_ARGUMENT",
      "\0206\032\037\212\235 \033FunctionDeclarationArgument\022K\n\"F" +
      "UNCTION_DECLARATION_ARGUMENT_NAME\0207\032#\212\235 " +
      "\037FunctionDeclarationArgumentName\022\\\n+FUNC" +
      "TION_DECLARATION_ARGUMENT_DEFAULT_VALUE\020" +
      "8\032+\212\235 \'FunctionDeclarationArgumentDefaul" +
      "tValue\022J\n\"FUNCTION_DECLARATION_VAR_ARGS_" +
      "LIST\0209\032\"\212\235 \036FunctionDeclarationVarArgsLi" +
      "st\022)\n\020TYPE_DECLARATION\020:\032\023\212\235 \017TypeDeclar" +
      "ation\0222\n\025TYPE_DECLARATION_BODY\020;\032\027\212\235 \023Ty" +
      "peDeclarationBody\0224\n\026TYPE_DECLARATION_BA",
      "SES\020<\032\030\212\235 \024TypeDeclarationBases\022>\n\033TYPE_" +
      "DECLARATION_IMPLEMENTS\020=\032\035\212\235 \031TypeDeclar" +
      "ationImplements\0222\n\025VISIBLE_FROM_INSTANCE" +
      "\020>\032\027\212\235 \023VisibleFromInstance\022*\n\021VISIBLE_F" +
      "ROM_TYPE\020?\032\023\212\235 \017VisibleFromType\0220\n\024VISIB" +
      "LE_FROM_SUBTYPE\020@\032\026\212\235 \022VisibleFromSubtyp" +
      "e\0220\n\024VISIBLE_FROM_PACKAGE\020A\032\026\212\235 \022Visible" +
      "FromPackage\0226\n\027VISIBLE_FROM_SUBPACKAGE\020B" +
      "\032\031\212\235 \025VisibleFromSubpackage\022.\n\023VISIBLE_F" +
      "ROM_MODULE\020C\032\025\212\235 \021VisibleFromModule\022.\n\023V",
      "ISIBLE_FROM_FRIEND\020D\032\025\212\235 \021VisibleFromFri" +
      "end\022,\n\022VISIBLE_FROM_WORLD\020E\032\024\212\235 \020Visible" +
      "FromWorld\022\016\n\002IF\020F\032\006\212\235 \002If\022!\n\014IF_CONDITIO" +
      "N\020G\032\017\212\235 \013IfCondition\022\027\n\007IF_BODY\020H\032\n\212\235 \006I" +
      "fBody\022\027\n\007IF_ELSE\020I\032\n\212\235 \006IfElse\022\026\n\006SWITCH" +
      "\020J\032\n\212\235 \006Switch\022\037\n\013SWITCH_CASE\020K\032\016\212\235 \nSwi" +
      "tchCase\0222\n\025SWITCH_CASE_CONDITION\020L\032\027\212\235 \023" +
      "SwitchCaseCondition\022(\n\020SWITCH_CASE_BODY\020" +
      "M\032\022\212\235 \016SwitchCaseBody\022%\n\016SWITCH_DEFAULT\020" +
      "N\032\021\212\235 \rSwitchDefault\022\020\n\003FOR\020O\032\007\212\235 \003For\022\031",
      "\n\010FOR_INIT\020P\032\013\212\235 \007ForInit\022%\n\016FOR_EXPRESS" +
      "ION\020Q\032\021\212\235 \rForExpression\022\035\n\nFOR_UPDATE\020R" +
      "\032\r\212\235 \tForUpdate\022\031\n\010FOR_BODY\020S\032\013\212\235 \007ForBo" +
      "dy\022\031\n\010FOR_EACH\020T\032\013\212\235 \007ForEach\022\024\n\005WHILE\020U" +
      "\032\t\212\235 \005While\022\'\n\017WHILE_CONDITION\020V\032\022\212\235 \016Wh" +
      "ileCondition\022\035\n\nWHILE_BODY\020W\032\r\212\235 \tWhileB" +
      "ody\022\031\n\010DO_WHILE\020X\032\013\212\235 \007DoWhile\022,\n\022DO_WHI" +
      "LE_CONDITION\020Y\032\024\212\235 \020DoWhileCondition\022\"\n\r" +
      "DO_WHILE_BODY\020Z\032\017\212\235 \013DoWhileBody\022\024\n\005BREA" +
      "K\020[\032\t\212\235 \005Break\022\032\n\010CONTINUE\020\\\032\014\212\235 \010Contin",
      "ue\022\022\n\004GOTO\020]\032\010\212\235 \004Goto\022\024\n\005BLOCK\020^\032\t\212\235 \005B" +
      "lock\022\037\n\013BLOCK_SCOPE\020_\032\016\212\235 \nBlockScope\022\026\n" +
      "\006RETURN\020`\032\n\212\235 \006Return\022\020\n\003TRY\020a\032\007\212\235 \003Try\022" +
      "\031\n\010TRY_BODY\020b\032\013\212\235 \007TryBody\022\033\n\tTRY_CATCH\020" +
      "c\032\014\212\235 \010TryCatch\022\037\n\013TRY_FINALLY\020d\032\016\212\235 \nTr" +
      "yFinally\022\024\n\005THROW\020e\032\t\212\235 \005Throw\022\026\n\006ASSERT" +
      "\020f\032\n\212\235 \006Assert\022\022\n\004CALL\020g\032\010\212\235 \004Call\022#\n\rCA" +
      "LL_RECEIVER\020h\032\020\212\235 \014CallReceiver\022\037\n\013CALL_" +
      "CALLEE\020i\032\016\212\235 \nCallCallee\0228\n\030CALL_POSITIO" +
      "NAL_ARGUMENT\020j\032\032\212\235 \026CallPositionalArgume",
      "nt\022.\n\023CALL_NAMED_ARGUMENT\020k\032\025\212\235 \021CallNam" +
      "edArgument\0227\n\030CALL_NAMED_ARGUMENT_NAME\020l" +
      "\032\031\212\235 \025CallNamedArgumentName\0229\n\031CALL_NAME" +
      "D_ARGUMENT_VALUE\020m\032\032\212\235 \026CallNamedArgumen" +
      "tValue\022\022\n\004NOOP\020n\032\010\212\235 \004Noop\022\'\n\017BOOLEAN_LI" +
      "TERAL\020o\032\022\212\235 \016BooleanLiteral\022!\n\014BYTE_LITE" +
      "RAL\020p\032\017\212\235 \013ByteLiteral\022.\n\023BYTE_STRING_LI" +
      "TERAL\020q\032\025\212\235 \021ByteStringLiteral\022+\n\021CHARAC" +
      "TER_LITERAL\020r\032\024\212\235 \020CharacterLiteral\022!\n\014L" +
      "IST_LITERAL\020s\032\017\212\235 \013ListLiteral\022\037\n\013MAP_LI",
      "TERAL\020t\032\016\212\235 \nMapLiteral\022!\n\014NULL_LITERAL\020" +
      "u\032\017\212\235 \013NullLiteral\022%\n\016NUMBER_LITERAL\020v\032\021" +
      "\212\235 \rNumberLiteral\022%\n\016REGEXP_LITERAL\020w\032\021\212" +
      "\235 \rRegexpLiteral\022\037\n\013SET_LITERAL\020x\032\016\212\235 \nS" +
      "etLiteral\022%\n\016STRING_LITERAL\020y\032\021\212\235 \rStrin" +
      "gLiteral\022#\n\rTUPLE_LITERAL\020z\032\020\212\235 \014TupleLi" +
      "teral\022!\n\014TYPE_LITERAL\020{\032\017\212\235 \013TypeLiteral" +
      "\022#\n\rOTHER_LITERAL\020|\032\020\212\235 \014OtherLiteral\022\033\n" +
      "\tMAP_ENTRY\020}\032\014\212\235 \010MapEntry\022\027\n\007MAP_KEY\020~\032" +
      "\n\212\235 \006MapKey\022\033\n\tMAP_VALUE\020\177\032\014\212\235 \010MapValue",
      "\022\023\n\004TYPE\020\200\001\032\010\212\235 \004Type\022&\n\016PRIMITIVE_TYPE\020" +
      "\201\001\032\021\212\235 \rPrimitiveType\022\037\n\nASSIGNMENT\020\202\001\032\016" +
      "\212\235 \nAssignment\0220\n\023ASSIGNMENT_VARIABLE\020\203\001" +
      "\032\026\212\235 \022AssignmentVariable\022*\n\020ASSIGNMENT_V" +
      "ALUE\020\204\001\032\023\212\235 \017AssignmentValue\0222\n\024AUGMENTE" +
      "D_ASSIGNMENT\020\205\001\032\027\212\235 \023AugmentedAssignment" +
      "\022C\n\035AUGMENTED_ASSIGNMENT_OPERATOR\020\206\001\032\037\212\235" +
      " \033AugmentedAssignmentOperator\022C\n\035AUGMENT" +
      "ED_ASSIGNMENT_VARIABLE\020\207\001\032\037\212\235 \033Augmented" +
      "AssignmentVariable\022=\n\032AUGMENTED_ASSIGNME",
      "NT_VALUE\020\210\001\032\034\212\235 \030AugmentedAssignmentValu" +
      "e\022\023\n\004THIS\020\211\001\032\010\212\235 \004This\022\031\n\007COMMENT\020\212\001\032\013\212\235" +
      " \007Comment\022%\n\rDOCUMENTATION\020\213\001\032\021\212\235 \rDocum" +
      "entation\022\037\n\nWHITESPACE\020\214\001\032\016\212\235 \nWhitespac" +
      "e\022\037\n\nINCOMPLETE\020\215\001\032\016\212\235 \nIncomplete\022!\n\013UN" +
      "ANNOTATED\020\216\001\032\017\212\235 \013Unannotated\032\014\300\244\036\000\210\243\036\000\250" +
      "\244\036\000B\016Z\004uast\240\343\036\001\340\342\036\000b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.GoGoProtos.getDescriptor(),
        }, assigner);
    internal_static_github_com_bblfsh_sdk_uast_Node_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_github_com_bblfsh_sdk_uast_Node_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_github_com_bblfsh_sdk_uast_Node_descriptor,
        new java.lang.String[] { "InternalType", "Properties", "Children", "Token", "StartPosition", "EndPosition", "Roles", });
    internal_static_github_com_bblfsh_sdk_uast_Node_PropertiesEntry_descriptor =
      internal_static_github_com_bblfsh_sdk_uast_Node_descriptor.getNestedTypes().get(0);
    internal_static_github_com_bblfsh_sdk_uast_Node_PropertiesEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_github_com_bblfsh_sdk_uast_Node_PropertiesEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_github_com_bblfsh_sdk_uast_Position_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_github_com_bblfsh_sdk_uast_Position_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_github_com_bblfsh_sdk_uast_Position_descriptor,
        new java.lang.String[] { "Offset", "Line", "Col", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.protobuf.GoGoProtos.enumdecl);
    registry.add(com.google.protobuf.GoGoProtos.enumvalueCustomname);
    registry.add(com.google.protobuf.GoGoProtos.goprotoEnumPrefix);
    registry.add(com.google.protobuf.GoGoProtos.goprotoEnumStringer);
    registry.add(com.google.protobuf.GoGoProtos.goprotoGetters);
    registry.add(com.google.protobuf.GoGoProtos.goprotoStringer);
    registry.add(com.google.protobuf.GoGoProtos.protosizerAll);
    registry.add(com.google.protobuf.GoGoProtos.sizerAll);
    registry.add(com.google.protobuf.GoGoProtos.typedecl);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.GoGoProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
